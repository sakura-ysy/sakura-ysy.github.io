<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>k8s资源清单</title>
      <link href="/k8s-zi-yuan-qing-dan/"/>
      <url>/k8s-zi-yuan-qing-dan/</url>
      
        <content type="html"><![CDATA[<p>搭建好k8s之后，就可以在集群中跑一些应用啦，不过在跑之前，要先知道几个概念。</p><span id="more"></span><p>第一个当然就是应用的<code>镜像</code>，因为我们在集群中运行的是容器，所以首先需要将我们的应用打包成镜像，或者直接从仓库中拉，很简单，这里就不再赘述了。</p><p>镜像准备好了，k8s 集群也准备好了，我们就可以把应用部署到集群中了。但是镜像到集群中运行这个过程如何完成呢？</p><p>在之前 Docker 环境下面我们是直接通过命令 <code>docker run</code> 来运行我们的应用的，在 k8s环境下面我们同样也可以用类似 <code>kubectl run</code> 这样的命令来运行我们的应用，但是在 k8s中却是不推荐使用命令行的方式，而是希望使用我们称为<code>资源清单</code>的东西来描述应用，资源清单可以用 YAML 或者 JSON 文件来编写，一般来说 YAML 文件更方便阅读和理解，所以我们的课程中都会使用 YAML 文件来进行描述。</p><p>实际上，我们在集群中部署的应用，就是一个<code>Kubernetes Object</code>，或者叫<code>API Object</code>。在创建k8s对象时，必须提供对象的规约，用来描述该对象的期望状态，以及关于对象的一些基本信息（例如名称）。当使用<code>Kubernetes API</code>创建对象时（或直接创建，或基于kubectl），API请求必须在请求体中包含<code>JSON</code>格式的信息，就是上面说的JSON文件。而当使用YAML文件作资源清单时，kubectl会在发起API请求时自动将这些信息转换成JSON格式。</p><p>通过一个资源清单文件来定义好一个应用后，我们就可以通过<code>kubectl</code>工具来直接运行它</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl create -f xxxx.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们知道 kubectl 是直接操作 <code>APIServer</code> 的，所以就相当于把我们的清单提交给了 APIServer，然后集群获取到清单描述的应用信息后存入到 <code>etcd</code> 数据库中，然后 <code>kube-scheduler</code> 组件发现这个时候有一个 <code>Pod</code> 还没有绑定到节点上，就会对这个 Pod 进行一系列的调度，把它调度到一个最合适的节点上，然后把这个节点和 Pod 绑定到一起（写回到 etcd），然后节点上的 kubelet 组件这个时候 watch 到有一个 Pod 被分配过来了，就去把这个 Pod 的信息拉取下来，然后根据描述通过容器运行时把容器创建出来，最后当然同样把 Pod 状态再写回到 etcd 中去，这样就完成了一整个的创建流程。</p><hr><h2 id="第一个容器化应用"><a href="#第一个容器化应用" class="headerlink" title="第一个容器化应用"></a>第一个容器化应用</h2><p>我们创建一个建议的nginx应用，是一个<code>Deployments</code>类型的API对象，其YAML资源清单文件如下，文件名为nginx-deployment.yaml。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1  <span class="token comment"># API版本</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment  <span class="token comment"># API对象类型</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deploy  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">chapter</span><span class="token punctuation">:</span> first<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token comment"># tells deployment to run 2 pods matching the template</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>  <span class="token comment"># Pod template</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.7.9        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Deployment对象，顾名思义，是用于部署应用的对象。它为Pod和ReplicaSet提供了一个声明式定义(declarative)方法，用来替代以前的<a href="https://www.kubernetes.org.cn/replication-controller-kubernetes">ReplicationController</a>来方便的管理应用。典型的应用场景包括：</p><ul><li>定义Deployment来创建Pod和ReplicaSet</li><li>滚动升级和回滚应用</li><li>扩容和缩容</li><li>暂停和继续Deployment</li></ul></blockquote><p>写完yaml文件后，就可以用<code>kubectl apply</code>来创建上述对象：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl apply -f deployment.apps/nginx-deployment created$ kubectl get podsNAME                            READY   STATUS    RESTARTS   AGEnginx-deploy-786b576769-6lcpn   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          108snginx-deploy-786b576769-cz2f6   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          108s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，上述的Deployment创建出了两个Pod，因为资源清单里指令了字段<code>replicas: 2</code>。当然，Deployment本身也是个对象，因此我们也可以通过kubctl来查看到它的状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get deploymentNAME           READY   UP-TO-DATE   AVAILABLE   AGEnginx-deploy   <span class="token number">2</span>/2     <span class="token number">2</span>            <span class="token number">2</span>           12m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，<code>READY 2/2</code>指该Deployment期望创建2个副本，实际创建了2个副本，这里的副本就是Pod。<code>UP-TO-DATE</code>指有多少个副本已更新到最新状态，这里两个Pod都是最新的。</p><p>这个模板中定义了我们的 Pod 中只有一个名为 nginx 的容器，容器使用的镜像是 <code>nginx:1.7.9</code>（spec.containers[0].image），并且这个容器监听的端口是 80（spec.containers[0].ports[0].containerPort），另外我们还为 Pod 添加了一个<code>app: nginx</code>这样的 Label 标签，这里需要非常注意的是上面的 <code>selector.matchLabels</code> 区域就是来表示我们的 Deployment 来管理哪些 Pod 的，所以这个地方需要和 Pod 模板中的 Label 标签保持一致，非常重要的。</p><p>另外我们也可以发现每个 API 对象都有一个 <code>Metadata</code> 的字段，用来表示该对象的元数据的，比如定义 name、namespace 等，比如上面 Deployment 和 Pod 模板中都有这个字段，至于为什么 Pod 模板中没有 name 这个元信息呢，这是因为 Deployment 这个控制器会自动在他自己的 name 基础上生成 Pod 名，不过 Deployment 下面定义的 Label 标签就没有 Pod 中定义的 Label 标签那么重要了，只是起到一个对该对象标识和过滤的作用。比如我们在查询对象的时候可以带上标签来进行过滤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get deployment -l <span class="token assign-left variable">chapter</span><span class="token operator">=</span>first-appNAME           READY   UP-TO-DATE   AVAILABLE   AGEnginx-deploy   <span class="token number">2</span>/2     <span class="token number">2</span>            <span class="token number">2</span>           51m$ kubectl get pods -l <span class="token assign-left variable">app</span><span class="token operator">=</span>nginxNAME                            READY   STATUS    RESTARTS   AGEnginx-deploy-786b576769-6lcpn   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          22mnginx-deploy-786b576769-cz2f6   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          22m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里我们就完成了我们的第一个应用的容器化部署，但是往往我们在部署应用的过程中或多或少会遇到一些问题，这个时候我们可以使用一个 <code>kubectl describe</code> 命令来查看资源对象的详细信息，比如我们用下面的命令来查看 Pod 的详细信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl describe pod nginx-deploy-786b576769-6lcpnName:         nginx-deploy-786b576769-6lcpnNamespace:    defaultPriority:     <span class="token number">0</span>Node:         node1/192.168.186.150Start Time:   Mon, <span class="token number">28</span> Feb <span class="token number">2022</span> <span class="token number">21</span>:07:03 +0800Labels:       <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx              pod-template-hash<span class="token operator">=</span>786b576769Annotations:  <span class="token operator">&lt;</span>none<span class="token operator">></span>Status:       RunningIP:           <span class="token number">10.244</span>.2.4IPs:  IP:           <span class="token number">10.244</span>.2.4Controlled By:  ReplicaSet/nginx-deploy-786b576769Containers:  nginx:    Container ID:   docker://59159005469e5cb0ee5dd544bb11f06bf16bd04290d01d6b0f39a81962f9ef52    Image:          nginx:latest    Image ID:       docker-pullable://nginx@sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31    Port:           <span class="token number">80</span>/TCP    Host Port:      <span class="token number">0</span>/TCP    State:          Running      Started:      Mon, <span class="token number">28</span> Feb <span class="token number">2022</span> <span class="token number">21</span>:07:04 +0800    Ready:          True    Restart Count:  <span class="token number">0</span>    Environment:    <span class="token operator">&lt;</span>none<span class="token operator">></span>    Mounts:      /var/run/secrets/kubernetes.io/serviceaccount from default-token-fkt88 <span class="token punctuation">(</span>ro<span class="token punctuation">)</span>Conditions:  Type              Status  Initialized       True   Ready             True   ContainersReady   True   PodScheduled      True Volumes:  default-token-fkt88:    Type:        Secret <span class="token punctuation">(</span>a volume populated by a Secret<span class="token punctuation">)</span>    SecretName:  default-token-fkt88    Optional:    <span class="token boolean">false</span>QoS Class:       BestEffortNode-Selectors:  <span class="token operator">&lt;</span>none<span class="token operator">></span>Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="token keyword">for</span> 300s                 node.kubernetes.io/unreachable:NoExecute <span class="token keyword">for</span> 300sEvents:  Type    Reason     Age        From               Message  ----    ------     ----       ----               -------  Normal  Scheduled  <span class="token operator">&lt;</span>unknown<span class="token operator">></span>  default-scheduler  Successfully assigned default/nginx-deploy-786b576769-6lcpn to node1  Normal  Pulled     22m        kubelet, node1     Container image <span class="token string">"nginx:latest"</span> already present on machine  Normal  Created    22m        kubelet, node1     Created container nginx  Normal  Started    22m        kubelet, node1     Started container nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到看到很多这个 Pod 的详细信息，比如调度到的节点、状态、IP 等，一般我们比较关心的是下面的 <code>Events</code> 部分，就是我们说的<strong>事件</strong>。在 Kubernetes 创建资源对象的过程中，对该对象的一些重要操作，都会被记录在这个对象的 <code>Events</code> 里面，可以通过 <code>kubectl describe</code> 指令查看对应的结果，所以这个指令会使以后排错过程中经常使用的指令。</p><p><code>Events</code>中越往后的信息越新。比如上面的这个 Pod，可以看到它被创建之后，被调度器调度（Successfully assigned）到了 node1 节点上，然后指定的镜像已经在该节点上存在了，所以没有再去拉取镜像，然后创建我们定义的 nginx 容器，最后启动定义的容器。</p><p>前面说过Deployment支持滚动升级，也就是滚动更新。当我们需要更新Deployment时，可以直接该上述yaml文件。比如这里要将Pod的nginx镜像版本改为latest：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">...</span>        <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest  <span class="token comment"># 这里被从 1.7.9 修改为latest</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再重新执行一次<code>kubectl apply</code>即可更新。我们不必担心当前的操作是创建，还是更新，k8s会更新yaml文件的内容变化自动处理。也就是，不管是创建还是更新，都可用命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl apply -f nginx-deployment.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="YAML文件"><a href="#YAML文件" class="headerlink" title="YAML文件"></a>YAML文件</h2><p>YAML是专门用来写配置文件的语言，非常简洁和强大，远比JSON格式方便，它实质上是一种通用的数据串行化格式。其基本语法规则为：</p><blockquote><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用<code>Tab</code>键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul></blockquote><p>在 Kubernetes 中，我们只需要了解两种结构类型就行了：</p><blockquote><ul><li>Lists</li><li>Maps</li></ul></blockquote><p>也就说，我们编写的资源文件，基本都是Lists和Maps的嵌套。</p><h3 id="MAPS"><a href="#MAPS" class="headerlink" title="MAPS"></a>MAPS</h3><p>就是多个<code>key-value</code>，例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，首行的<code>---</code>是有意义的，但这里非必须。它是分隔符，在yaml中可以用它区分多个文件，这就意味着，在一个yaml文件中可以进行多个对象的描述，互相之间用<code>---</code>分隔即可。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ydzs<span class="token punctuation">-</span>site  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 YAML 文件，metadata 这个 KEY 对应的值就是一个 <code>Maps</code> 了，而且嵌套的 labels 这个 KEY 的值又是一个 Map，可以根据需求多层嵌套。</p><p>YAML 根据行缩进来知道内容之间的嗯关联性的。比如上面的 YAML 文件，用了两个空格作为缩进，空格的数量并不重要，但是你得保持一致，并且至少要求一个空格（什么意思？就是你别一会缩进两个空格，一会缩进4个空格）。我们可以看到 name 和 labels 是相同级别的缩进，所以 YAML 处理器就知道了他们属于同一个 Map，而 app 是 labels 的值是因为 app 的缩进更大。</p><blockquote><p>注意！ 在 YAML 文件中绝对不要使用 tab 键来进行缩进，只能空格。</p></blockquote><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p><code>Lists</code>就是列表，说白了就是数组，在 YAML 文件中我们可以这样定义：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">args  <span class="token punctuation">-</span> Cat  <span class="token punctuation">-</span> Dog  <span class="token punctuation">-</span> Fish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，Lists 的子项也可以是 Maps，Maps 的子项也可以是 Lists 如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ydzs<span class="token punctuation">-</span>site  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> web<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end      <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> flaskapp<span class="token punctuation">-</span>demo      <span class="token key atrule">image</span><span class="token punctuation">:</span> cnych/flaskapp      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个 YAML 文件，定义了一个叫 containers 的 List 对象，每个子项都由 name、image、ports 组成，每个 ports 都有一个 key 为 containerPort 的 Map 组成。</p><hr><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>那么，我们该如何知道诸如Pod、Deployment这些API对象的资源清单该怎么写呢？有哪些字段需要指定，该怎么指定呢？答案就是官网 =&gt; <a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/">Workload Resources</a>。诸如Pod、ReplicaSet、Deployment这些都属于API对象的<code>Workload Resources</code>，官网会列出他们：</p><p><img src="https://i.bmp.ovh/imgs/2022/02/3630664c03276690.png"></p><p>点进想看的对象中，即可看见每个字段的意义。比如点进Deployment，可以看到apiVersion、kind、metadata、spec、selector等等。注意，如果字段后面标注了<code>requested</code>，就说明该字段是必须的，不能少。</p><p><img src="https://i.bmp.ovh/imgs/2022/02/644e59ffc3fbe62a.png"></p><p>差Web文档固然是个好方法，但是如果平时我们编写资源清单的时候都这样去查找文档，势必会效率低下。Kubernetes 也考虑到了这点，我们可以直接通过 kubectl 命令行工具来获取这些字段信息，同样的，比如我们要获取 Deployment 的字段信息，我们可以通过 <code>kubectl explain</code> 命令来了解：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl explain deploymentKIND:     DeploymentVERSION:  apps/v1DESCRIPTION:     Deployment enables declarative updates <span class="token keyword">for</span> Pods and ReplicaSets.FIELDS:   apiVersion   <span class="token operator">&lt;</span>string<span class="token operator">></span>     APIVersion defines the versioned schema of this representation of an     object. Servers should convert recognized schemas to the latest internal     value, and may reject unrecognized values. More info:     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#resources</span>   kind <span class="token operator">&lt;</span>string<span class="token operator">></span>     Kind is a string value representing the REST resource this object     represents. Servers may infer this from the endpoint the client submits     requests to. Cannot be updated. In CamelCase. More info:     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#types-kinds</span>   metadata <span class="token operator">&lt;</span>Object<span class="token operator">></span>     Standard object metadata.   spec <span class="token operator">&lt;</span>Object<span class="token operator">></span>     Specification of the desired behavior of the Deployment.   status   <span class="token operator">&lt;</span>Object<span class="token operator">></span>     Most recently observed status of the Deployment.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到上面的信息和我们在 API 文档中查看到的基本一致，比如我们看到其中 <code>spec</code> 字段是一个 <code>&lt;Object&gt;</code> 类型的，证明该字段下面是一个对象，我们可以继续去查看这个字段下面的详细信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl explain deployment.specKIND:     DeploymentVERSION:  apps/v1RESOURCE: spec <span class="token operator">&lt;</span>Object<span class="token operator">></span>DESCRIPTION:     Specification of the desired behavior of the Deployment.     DeploymentSpec is the specification of the desired behavior of the     Deployment.FIELDS:   minReadySeconds  <span class="token operator">&lt;</span>integer<span class="token operator">></span>     Minimum number of seconds <span class="token keyword">for</span> <span class="token function">which</span> a newly created pod should be ready     without any of its container crashing, <span class="token keyword">for</span> it to be considered available.     Defaults to <span class="token number">0</span> <span class="token punctuation">(</span>pod will be considered available as soon as it is ready<span class="token punctuation">)</span>   paused   <span class="token operator">&lt;</span>boolean<span class="token operator">></span>     Indicates that the deployment is paused.   progressDeadlineSeconds  <span class="token operator">&lt;</span>integer<span class="token operator">></span>     The maximum <span class="token function">time</span> <span class="token keyword">in</span> seconds <span class="token keyword">for</span> a deployment to <span class="token function">make</span> progress before it is     considered to be failed. The deployment controller will <span class="token builtin class-name">continue</span> to process     failed deployments and a condition with a ProgressDeadlineExceeded reason     will be surfaced <span class="token keyword">in</span> the deployment status. Note that progress will not be     estimated during the <span class="token function">time</span> a deployment is paused. Defaults to 600s.   replicas <span class="token operator">&lt;</span>integer<span class="token operator">></span>     Number of desired pods. This is a pointer to distinguish between explicit     zero and not specified. Defaults to <span class="token number">1</span>.   revisionHistoryLimit <span class="token operator">&lt;</span>integer<span class="token operator">></span>     The number of old ReplicaSets to retain to allow rollback. This is a     pointer to distinguish between explicit zero and not specified. Defaults to     <span class="token number">10</span>.   selector <span class="token operator">&lt;</span>Object<span class="token operator">></span> -required-     Label selector <span class="token keyword">for</span> pods. Existing ReplicaSets whose pods are selected by     this will be the ones affected by this deployment. It must match the pod     template's labels.   strategy <span class="token operator">&lt;</span>Object<span class="token operator">></span>     The deployment strategy to use to replace existing pods with new ones.   template <span class="token operator">&lt;</span>Object<span class="token operator">></span> -required-     Template describes the pods that will be created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubeadm搭建k8s集群（单master）</title>
      <link href="/kubeadm-da-jian-k8s-ji-qun-dan-master/"/>
      <url>/kubeadm-da-jian-k8s-ji-qun-dan-master/</url>
      
        <content type="html"><![CDATA[<p>本篇将记录采用<code>kubeadm</code>快速搭建单master的k8s集群的全过程，用于对k8s的学习。为了根据最新的集群特性，我们这里安装目前最新的版本 v1.16.2，如果在生产环境使用，建议使用上一个版本中最大的修正版本，比如 v1.15.5，由于 v1.16 版本和之前的版本有很大变化，主要体现在 APIVersion 移除了之前的一些版本，所以我们这里采用最新的<code> v1.16.2</code> 的版本</p><span id="more"></span><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>该阶段要在所有节点中都做一遍。</p><p>3个节点，都是 Centos 7.6 系统，内核版本：3.10.0-957.12.2.el7.x86_64，在每个节点上添加 hosts 信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/hosts<span class="token number">192.168</span>.186.147 master<span class="token number">192.168</span>.186.148 node1<span class="token number">192.168</span>.186.149 node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>节点的 hostname 必须使用标准的 DNS 命名，另外千万不用什么默认的 <code>localhost</code> 的 hostname，会导致各种错误出现的。在 Kubernetes 项目里，机器的名字以及一切存储在 Etcd 中的 API 对象，都必须使用标准的 DNS 命名（RFC 1123）。可以使用命令 <code>hostnamectl set-hostname ydzs-node1</code> 来修改 hostname。</p><p>禁用防火墙：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ systemctl stop firewalld$ systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>禁用SELINUX：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ setenforce <span class="token number">0</span>$ <span class="token function">cat</span> /etc/selinux/config<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于开启内核 ipv4 转发需要加载 br_netfilter 模块，所以加载下该模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ modprobe br_netfilter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建文件<code>/etc/sysctl.d/k8s.conf</code>，添加如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>bridge-nf 使得 netfilter 可以对 Linux 网桥上的 IPv4/ARP/IPv6 包过滤。比如，设置<code>net.bridge.bridge-nf-call-iptables＝1</code>后，二层的网桥在转发包时也会被 iptables的 FORWARD 规则所过滤。常用的选项包括：</p><p>​    &gt; net.bridge.bridge-nf-call-arptables：是否在 arptables 的 FORWARD 中过滤网桥的 ARP 包</p><p>​    &gt; net.bridge.bridge-nf-call-ip6tables：是否在 ip6tables 链中过滤 IPv6 包</p><p>​    &gt; net.bridge.bridge-nf-call-iptables：是否在 iptables 链中过滤 IPv4 包</p><p>​    &gt; net.bridge.bridge-nf-filter-vlan-tagged：是否在 iptables/arptables 中过滤打了 vlan 标签的包。</p></blockquote><p>执行如下命令使修改生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sysctl -p /etc/sysctl.d/k8s.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 ipvs：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token operator">></span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&lt;&lt;</span><span class="token string">EOF#!/bin/bashmodprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrack_ipv4EOF</span>$ <span class="token function">chmod</span> <span class="token number">755</span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> /etc/sysconfig/modules/ipvs.modules <span class="token operator">&amp;&amp;</span> lsmod <span class="token operator">|</span> <span class="token function">grep</span> -e ip_vs -e nf_conntrack_ipv4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面脚本创建了的<code>/etc/sysconfig/modules/ipvs.modules</code>文件，保证在节点重启后能自动加载所需模块。使用<code>lsmod | grep -e ip_vs -e nf_conntrack_ipv4</code>命令查看是否已经正确加载所需的内核模块。</p><p>接下来还需要确保各个节点上已经安装了 ipset 软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> ipset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了便于查看 ipvs 的代理规则，最好安装一下管理工具 ipvsadm：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> ipvsadm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同步服务器时间：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> chrony -y$ systemctl <span class="token builtin class-name">enable</span> chronyd$ systemctl start chronyd$ chronyc sources<span class="token number">210</span> Number of sources <span class="token operator">=</span> <span class="token number">4</span>MS Name/IP address         Stratum Poll Reach LastRx Last sample<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>^+ sv1.ggsrv.de                  <span class="token number">2</span>   <span class="token number">6</span>    <span class="token number">17</span>    <span class="token number">32</span>   -823us<span class="token punctuation">[</span>-1128us<span class="token punctuation">]</span> +/-   98ms^- montreal.ca.logiplex.net      <span class="token number">2</span>   <span class="token number">6</span>    <span class="token number">17</span>    <span class="token number">32</span>    -17ms<span class="token punctuation">[</span>  -17ms<span class="token punctuation">]</span> +/-  179ms^- ntp6.flashdance.cx            <span class="token number">2</span>   <span class="token number">6</span>    <span class="token number">17</span>    <span class="token number">32</span>    -32ms<span class="token punctuation">[</span>  -32ms<span class="token punctuation">]</span> +/-  161ms^* <span class="token number">119.28</span>.183.184                <span class="token number">2</span>   <span class="token number">6</span>    <span class="token number">33</span>    <span class="token number">32</span>   +661us<span class="token punctuation">[</span> +357us<span class="token punctuation">]</span> +/-   38ms$ <span class="token function">date</span>Tue Aug <span class="token number">27</span> 09:28:41 CST <span class="token number">2019</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭 swap 分区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ swapoff -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改<code>/etc/fstab</code>文件，注释掉 SWAP 的自动挂载，使用<code>free -m</code>确认 swap 已经关闭。swappiness 参数调整，修改<code>/etc/sysctl.d/k8s.conf</code>添加下面一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vm.swappiness<span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行<code>sysctl -p /etc/sysctl.d/k8s.conf</code>使修改生效。</p><p>接下来可以安装 Docker：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> -y yum-utils <span class="token punctuation">\</span>  device-mapper-persistent-data <span class="token punctuation">\</span>  lvm2<span class="token comment"># 如果下面命令执行超时，可以使用阿里云的源代替：http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span>$ yum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>    https://download.docker.com/linux/centos/docker-ce.repo$ yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r * updates: mirrors.tuna.tsinghua.edu.cnLoading mirror speeds from cached hostfileLoaded plugins: fastestmirror, langpacksInstalled Packages * extras: mirrors.tuna.tsinghua.edu.cn * epel: mirrors.yun-idc.comdocker-ce.x86_64            <span class="token number">3</span>:19.03.1-3.el7                     docker-ce-stabledocker-ce.x86_64            <span class="token number">3</span>:19.03.0-3.el7                     docker-ce-stabledocker-ce.x86_64            <span class="token number">3</span>:18.09.8-3.el7                     docker-ce-stable<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>docker-ce.x86_64            <span class="token number">18.03</span>.1.ce-1.el7.centos             docker-ce-stabledocker-ce.x86_64            <span class="token number">18.03</span>.0.ce-1.el7.centos             docker-ce-stable<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> * base: mirror.lzu.edu.cnAvailable Packages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以选择安装一个版本，比如这里使用<code>18.09.9</code>版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> docker-ce-18.09.9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置 Docker 镜像加速器，这一步在阿里云的<code>容器镜像服务</code> –&gt; <code>镜像加速器</code>中有具体代码，每个人的不一样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "exec-opts": ["native.cgroupdriver=systemd"], # 额外加的  "registry-mirrors": ["https://xxxxxxx.mirror.aliyuncs.com"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这里有个坑。由于默认情况下 kubelet 使用的 cgroupdriver 是 <code>systemd</code>，而docker默认使用的cgroupdriver是<code>cgroupfs</code>，不一样。这里需要保持二者的cgroupdriver一致，为了避免更改kublet的cgroupdriver，我们将docker的cgroupdriver更改为<code>systemd</code>。这就是为什么上述代码要额外加一行。</p><p>Docker设置开机自启：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>  <span class="token comment"># 开机自启</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在确保 Docker 安装完成后，上面的相关环境配置也完成了，现在我们就可以来安装 Kubeadm 了，我们这里是通过指定yum 源的方式来进行安装的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo</span>[kubernetes]name=Kubernetesbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpgEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然了，上面的 yum 源是需要科学上网的，如果不能科学上网的话，我们可以使用阿里云的源进行安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo</span>[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后安装 kubeadm、kubelet、kubectl：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># --disableexcludes 禁掉除了kubernetes之外的别的仓库</span>$ yum <span class="token function">install</span> -y kubelet-1.16.2 kubeadm-1.16.2 kubectl-1.16.2 --disableexcludes<span class="token operator">=</span>kubernetes$ kubeadm versionkubeadm version: <span class="token operator">&amp;</span>version.Info<span class="token punctuation">&#123;</span>Major:<span class="token string">"1"</span>, Minor:<span class="token string">"16"</span>, GitVersion:<span class="token string">"v1.16.2"</span>, GitCommit:<span class="token string">"c97fe5036ef3df2967d086711e6c0c405941e14b"</span>, GitTreeState:<span class="token string">"clean"</span>, BuildDate:<span class="token string">"2019-10-15T19:15:39Z"</span>, GoVersion:<span class="token string">"go1.12.10"</span>, Compiler:<span class="token string">"gc"</span>, Platform:<span class="token string">"linux/amd64"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到我们这里安装的是 v1.16.2 版本，然后将 kubelet 设置成开机启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ systemctl <span class="token builtin class-name">enable</span> --now kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到目前为止，上述全部操作在所有节点都要进行。</p><hr><h2 id="初始化master"><a href="#初始化master" class="headerlink" title="初始化master"></a>初始化master</h2><p>该节点只需master节点做，从节点要跳过。首先，在master 节点配置 kubeadm 初始化文件，可以通过如下命令导出默认的初始化配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubeadm config print init-defaults <span class="token operator">></span> kubeadm.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后根据我们自己的需求修改配置，比如修改 imageRepository 的值，kube-proxy 的模式为 ipvs，另外需要注意的是我们这里是准备安装 flannel 网络插件的，需要将 networking.podSubnet 设置为<code>10.244.0.0/16</code>：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta2<span class="token key atrule">bootstrapTokens</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">groups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> system<span class="token punctuation">:</span>bootstrappers<span class="token punctuation">:</span>kubeadm<span class="token punctuation">:</span>default<span class="token punctuation">-</span>node<span class="token punctuation">-</span>token  <span class="token key atrule">token</span><span class="token punctuation">:</span> abcdef.0123456789abcdef  <span class="token key atrule">ttl</span><span class="token punctuation">:</span> 24h0m0s  <span class="token key atrule">usages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> signing  <span class="token punctuation">-</span> authentication<span class="token key atrule">kind</span><span class="token punctuation">:</span> InitConfiguration<span class="token key atrule">localAPIEndpoint</span><span class="token punctuation">:</span>  <span class="token key atrule">advertiseAddress</span><span class="token punctuation">:</span> 192.168.186.147  <span class="token comment"># apiserver 节点内网IP</span>  <span class="token key atrule">bindPort</span><span class="token punctuation">:</span> <span class="token number">6443</span><span class="token key atrule">nodeRegistration</span><span class="token punctuation">:</span>  <span class="token key atrule">criSocket</span><span class="token punctuation">:</span> /var/run/dockershim.sock  <span class="token key atrule">name</span><span class="token punctuation">:</span> master  <span class="token comment"># 默认读取当前节点的hostname</span>  <span class="token key atrule">taints</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule    <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master<span class="token punctuation">---</span><span class="token key atrule">apiServer</span><span class="token punctuation">:</span>  <span class="token key atrule">timeoutForControlPlane</span><span class="token punctuation">:</span> 4m0s<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta2<span class="token key atrule">certificatesDir</span><span class="token punctuation">:</span> /etc/kubernetes/pki<span class="token key atrule">clusterName</span><span class="token punctuation">:</span> kubernetes<span class="token key atrule">controllerManager</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token key atrule">dns</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> CoreDNS<span class="token key atrule">etcd</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">dataDir</span><span class="token punctuation">:</span> /var/lib/etcd<span class="token key atrule">imageRepository</span><span class="token punctuation">:</span> registry.aliyuncs.com/google_containers  <span class="token comment"># 修改成阿里云镜像源</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterConfiguration<span class="token key atrule">kubernetesVersion</span><span class="token punctuation">:</span> v1.16.2  <span class="token comment"># 版本一定要写对，不然会是坑</span><span class="token key atrule">networking</span><span class="token punctuation">:</span>  <span class="token key atrule">dnsDomain</span><span class="token punctuation">:</span> cluster.local  <span class="token key atrule">podSubnet</span><span class="token punctuation">:</span> 10.244.0.0/16  <span class="token comment"># Pod 网段，flannel插件需要使用这个网段</span>  <span class="token key atrule">serviceSubnet</span><span class="token punctuation">:</span> 10.96.0.0/12<span class="token key atrule">scheduler</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeproxy.config.k8s.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> KubeProxyConfiguration<span class="token key atrule">mode</span><span class="token punctuation">:</span> ipvs  <span class="token comment"># kube-proxy 模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对于上面的资源清单的文档比较杂，要想完整了解上面的资源对象对应的属性，可以查看对应的 godoc 文档，地址:</p><p><a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2</a></p></blockquote><p>然后使用上面的配置文件进行初始化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubeadm init --config kubeadm.yaml<span class="token punctuation">[</span>init<span class="token punctuation">]</span> Using Kubernetes version: v1.16.2<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING SystemVerification<span class="token punctuation">]</span>: this Docker version is not on the list of validated versions: <span class="token number">20.10</span>.12. Latest validated version: <span class="token number">18.09</span><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Pulling images required <span class="token keyword">for</span> setting up a Kubernetes cluster<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> This might take a minute or two, depending on the speed of your internet connection<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> You can also perform this action <span class="token keyword">in</span> beforehand using <span class="token string">'kubeadm config images pull'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Activating the kubelet <span class="token function">service</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Using certificateDir folder <span class="token string">"/etc/kubernetes/pki"</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> apiserver serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">10.96</span>.0.1 <span class="token number">192.168</span>.186.147<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-kubelet-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"front-proxy-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/ca"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/server"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/server serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>master localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.186.147 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/peer"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> etcd/peer serving cert is signed <span class="token keyword">for</span> DNS names <span class="token punctuation">[</span>master localhost<span class="token punctuation">]</span> and IPs <span class="token punctuation">[</span><span class="token number">192.168</span>.186.147 <span class="token number">127.0</span>.0.1 ::1<span class="token punctuation">]</span><span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"etcd/healthcheck-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"apiserver-etcd-client"</span> certificate and key<span class="token punctuation">[</span>certs<span class="token punctuation">]</span> Generating <span class="token string">"sa"</span> key and public key<span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Using kubeconfig folder <span class="token string">"/etc/kubernetes"</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"admin.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"kubelet.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"controller-manager.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>kubeconfig<span class="token punctuation">]</span> Writing <span class="token string">"scheduler.conf"</span> kubeconfig <span class="token function">file</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Using manifest folder <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-apiserver"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-controller-manager"</span><span class="token punctuation">[</span>control-plane<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token string">"kube-scheduler"</span><span class="token punctuation">[</span>etcd<span class="token punctuation">]</span> Creating static Pod manifest <span class="token keyword">for</span> <span class="token builtin class-name">local</span> etcd <span class="token keyword">in</span> <span class="token string">"/etc/kubernetes/manifests"</span><span class="token punctuation">[</span>wait-control-plane<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="token string">"/etc/kubernetes/manifests"</span><span class="token builtin class-name">.</span> This can take up to 4m0s<span class="token punctuation">[</span>apiclient<span class="token punctuation">]</span> All control plane components are healthy after <span class="token number">14.001969</span> seconds<span class="token punctuation">[</span>upload-config<span class="token punctuation">]</span> Storing the configuration used <span class="token keyword">in</span> ConfigMap <span class="token string">"kubeadm-config"</span> <span class="token keyword">in</span> the <span class="token string">"kube-system"</span> Namespace<span class="token punctuation">[</span>kubelet<span class="token punctuation">]</span> Creating a ConfigMap <span class="token string">"kubelet-config-1.16"</span> <span class="token keyword">in</span> namespace kube-system with the configuration <span class="token keyword">for</span> the kubelets <span class="token keyword">in</span> the cluster<span class="token punctuation">[</span>upload-certs<span class="token punctuation">]</span> Skipping phase. Please see --upload-certs<span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> master as control-plane by adding the label <span class="token string">"node-role.kubernetes.io/master=''"</span><span class="token punctuation">[</span>mark-control-plane<span class="token punctuation">]</span> Marking the <span class="token function">node</span> master as control-plane by adding the taints <span class="token punctuation">[</span>node-role.kubernetes.io/master:NoSchedule<span class="token punctuation">]</span><span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Using token: abcdef.0123456789abcdef<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="token keyword">in</span> order <span class="token keyword">for</span> nodes to get long term certificate credentials<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> configured RBAC rules to allow certificate rotation <span class="token keyword">for</span> all <span class="token function">node</span> client certificates <span class="token keyword">in</span> the cluster<span class="token punctuation">[</span>bootstrap-token<span class="token punctuation">]</span> Creating the <span class="token string">"cluster-info"</span> ConfigMap <span class="token keyword">in</span> the <span class="token string">"kube-public"</span> namespace<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: CoreDNS<span class="token punctuation">[</span>addons<span class="token punctuation">]</span> Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully<span class="token operator">!</span>To start using your cluster, you need to run the following as a regular user:  <span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube  <span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configYou should now deploy a pod network to the cluster.Run <span class="token string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can <span class="token function">join</span> any number of worker nodes by running the following on each as root:kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.186.147:6443 --token abcdef.0123456789abcdef <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:8db87a6d2a260bcb89b9df0e98072173578c34c160493c6915917143763a97e4 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果之前没有更改过docker的cgroupdriver，这里会报一个Warning：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>WARNING IsDockerSystemdCheck<span class="token punctuation">]</span>: detected <span class="token string">"cgroupfs"</span> as the Docker cgroup driver. The recommended driver is <span class="token string">"systemd"</span><span class="token builtin class-name">.</span> Please follow the guide at https://kubernetes.io/docs/setup/cri/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着，按照提示，依次执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube$ <span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config$ <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，<code>kubeadm init</code>输出结果的最后一部分<code>kubeadm join &lt;flags&gt;</code>非常重要，如果从节点想要加入该master的集群，就需要敲入该命令。如果一不小心忘记了该命令，也没关系，可以使用下述命令重现：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubeadm token create --print-join-command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>kubeadm init</code>的执行流程如下：</p><p><img src="https://i.bmp.ovh/imgs/2022/02/8769f00a20eb55a8.png"></p><hr><h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><p>该阶段只需在从节点中进行。直接复制master节点给出的<code>kubeadm join ...</code>在终端执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node2 sakura<span class="token punctuation">]</span><span class="token comment"># kubeadm join 192.168.186.147:6443 --token abcdef.0123456789abcdef \</span><span class="token operator">></span>     --discovery-token-ca-cert-hash sha256:8db87a6d2a260bcb89b9df0e98072173578c34c160493c6915917143763a97e4 <span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>WARNING SystemVerification<span class="token punctuation">]</span>: this Docker version is not on the list of validated versions: <span class="token number">20.10</span>.12. Latest validated version: <span class="token number">18.09</span><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Downloading configuration <span class="token keyword">for</span> the kubelet from the <span class="token string">"kubelet-config-1.16"</span> ConfigMap <span class="token keyword">in</span> the kube-system namespace<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Activating the kubelet <span class="token function">service</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.This <span class="token function">node</span> has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run <span class="token string">'kubectl get nodes'</span> on the control-plane to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>kubeadm join</code>命令的执行流程：</p><p><img src="https://i.bmp.ovh/imgs/2022/02/c1e651a5b466bc39.png"></p><p>出现上述结果就说明节点已经加入集群成功，使用<code>kubectl get nodes</code>就可以看到所在集群的全部节点信息，但此时执行该命令会报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node2 k8s<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>Unable to connect to the server: x509: certificate signed by unknown authority <span class="token punctuation">(</span>possibly because of <span class="token string">"crypto/rsa: verification error"</span> <span class="token keyword">while</span> trying to verify candidate authority certificate <span class="token string">"kubernetes"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们需要将master节点中<code>$HOME/.kube/config </code>的内容拷贝进当前节点的<code>$HOME/.kube/config</code>中，上述命令才得以执行成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node2 k8s<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME     STATUS     ROLES    AGE   VERSIONmaster   NotReady   master   30m   v1.16.2node2    NotReady   <span class="token operator">&lt;</span>none<span class="token operator">></span>   28m   v1.16.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用同样的方式加入其他从节点即可</p><hr><h2 id="网络插件"><a href="#网络插件" class="headerlink" title="网络插件"></a>网络插件</h2><p>该阶段配置的整个集群的网络插件，所以在集群内的任何一个节点进行即可。</p><p>在上一步中可以看到，节点都是NotReady状态，这是因为还没有安装网络插件，在k8s官网中是这样描述网络插件的重要性的：</p><blockquote><p>你必须部署一个基于 Pod 网络插件的 容器网络接口(CNI)，以便你的 Pod 可以相互通信。 在安装网络之前，**集群 DNS (CoreDNS) **将不会启动。</p></blockquote><p>接下来安装网络插件，可以在文档：<a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/#how-to-implement-the-kubernetes-networking-model%E4%B8%AD%E9%80%89%E6%8B%A9%E6%88%91%E4%BB%AC%E8%A6%81%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%60flannel%60%EF%BC%9A">https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/#how-to-implement-the-kubernetes-networking-model中选择我们要用的网络插件，这里使用的是`flannel`：</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml<span class="token comment"># 因为有节点是多网卡，所以需要在资源清单文件中指定内网网卡</span><span class="token comment"># 搜索到名为 kube-flannel-ds-amd64 的 DaemonSet，在kube-flannel容器下面</span>$ <span class="token function">vi</span> kube-flannel.yml<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>containers:- name: kube-flannel  image: quay.io/coreos/flannel:v0.11.0-amd64  command:  - /opt/bin/flanneld  args:  - --ip-masq  - --kube-subnet-mgr  - --iface<span class="token operator">=</span>ens33  <span class="token comment"># 如果是多网卡的话，指定内网网卡的名称</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>$ kubectl apply -f kube-flannel.yml  <span class="token comment"># 安装 flannel 网络插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>隔一会儿查看 Pod 运行状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node2 k8s<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -n kube-system</span>NAME                             READY   STATUS    RESTARTS   AGEcoredns-58cc8c89f4-9qb66         <span class="token number">1</span>/1     Running   <span class="token number">0</span>          75mcoredns-58cc8c89f4-zmdk7         <span class="token number">1</span>/1     Running   <span class="token number">0</span>          75metcd-master                      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          74mkube-apiserver-master            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          74mkube-controller-manager-master   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          74mkube-flannel-ds-amd64-654x9      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          72skube-flannel-ds-amd64-p6dsg      <span class="token number">1</span>/1     Running   <span class="token number">0</span>          72skube-proxy-26225                 <span class="token number">1</span>/1     Running   <span class="token number">0</span>          75mkube-proxy-vwtbd                 <span class="token number">1</span>/1     Running   <span class="token number">0</span>          73mkube-scheduler-master            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          74m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们部署完网络插件后执行 ifconfig 命令，正常会看到新增的<code>cni0</code>与<code>flannel1</code>这两个虚拟设备，但是如果没有看到<code>cni0</code>这个设备也不用太担心，我们可以观察<code>/var/lib/cni</code>目录是否存在，如果不存在并不是说部署有问题，而是该节点上暂时还没有应用运行，我们只需要在该节点上运行一个 Pod 就可以看到该目录会被创建，并且<code>cni0</code>设备也会被创建出来。</p><p>网络插件运行成功了，node 状态也正常了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node2 k8s<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME     STATUS   ROLES    AGE   VERSIONmaster   Ready    master   76m   v1.16.2node2    Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   74m   v1.16.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p>Dashboard 是基于网页的 Kubernetes 管理界面，你可以使用 Dashboard 获取运行在集群中的应用的概览信息，也可以创建或者修改 Kubernetes 资源 （如 Deployment，Job，DaemonSet 等等）。例如，你可以对 Deployment 实现弹性伸缩、发起滚动升级、重启 Pod 或者使用向导创建新的应用等。在集群中的任何一个节点运行即可。</p><p>v1.16.2 版本的集群需要安装最新的 2.0+ 版本的 Dashboard，首先下载下来：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span> https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta5/aio/deploy/recommended.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Dashboard的默认Service是ClusterIP类型（只有集群内部能访问），这里要改为NodePort类型，使集群外部可以访问。修改<code>recommended.yaml</code>中的Service部分，加一行代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> recommended.yaml<span class="token comment"># 修改Service为NodePort类型</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: <span class="token number">443</span>      targetPort: <span class="token number">8443</span>  selector:    k8s-app: kubernetes-dashboard  type: NodePort  <span class="token comment"># 加上type=NodePort变成NodePort类型的服务</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接应用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl apply -f recommended.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Dashboard会默认安装在<code>kubernetes-dashboard</code>这个命名空间下，查看全部服务状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get all -n kubernetes-dashboardNAME                                             READY   STATUS    RESTARTS   AGEpod/dashboard-metrics-scraper-76585494d8-hznl6   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8m21spod/kubernetes-dashboard-6b86b44f87-slgtm        <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8m21sNAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>         AGEservice/dashboard-metrics-scraper   ClusterIP   <span class="token number">10.105</span>.26.186   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">8000</span>/TCP        8m21sservice/kubernetes-dashboard        NodePort    <span class="token number">10.102</span>.177.14   <span class="token operator">&lt;</span>none<span class="token operator">></span>        <span class="token number">443</span>:30454/TCP   8m21sNAME                                        READY   UP-TO-DATE   AVAILABLE   AGEdeployment.apps/dashboard-metrics-scraper   <span class="token number">1</span>/1     <span class="token number">1</span>            <span class="token number">1</span>           8m21sdeployment.apps/kubernetes-dashboard        <span class="token number">1</span>/1     <span class="token number">1</span>            <span class="token number">1</span>           8m21sNAME                                                   DESIRED   CURRENT   READY   AGEreplicaset.apps/dashboard-metrics-scraper-76585494d8   <span class="token number">1</span>         <span class="token number">1</span>         <span class="token number">1</span>       8m21sreplicaset.apps/kubernetes-dashboard-6b86b44f87        <span class="token number">1</span>         <span class="token number">1</span>         <span class="token number">1</span>       8m21s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>service</code>部分可以看到，dashboard映射到30454端口。使用<code>任意一个节点的IP:30454</code>即可进入dashborad，注意要用https，不能用http。这里用主节点IP：</p><p><img src="https://i.bmp.ovh/imgs/2022/02/65306290a2f4ae76.png"></p><p>选择Token来进入，但是现在没有Token，因此需要先创建一个用户。这里创建一个具有全局所有权限的用户来登录dashboard。新建文件<code>admin.yml</code>，写入下述内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> admin  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">rbac.authorization.kubernetes.io/autoupdate</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> cluster<span class="token punctuation">-</span>admin  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount  <span class="token key atrule">name</span><span class="token punctuation">:</span> admin  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> admin  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后值即apply上述yaml文件，创建用户admin：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl apply -f admin.yamlclusterrolebinding.rbac.authorization.k8s.io/admin createdserviceaccount/admin created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接着，获取该用户的Token，是一个很长的base64解码后的字符串：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get secret -n kubernetes-dashboard<span class="token operator">|</span><span class="token function">grep</span> admin-tokenadmin-token-ctmrh                  kubernetes.io/service-account-token   <span class="token number">3</span>      26s$ kubectl get secret admin-token-ctmrh -o <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>.data.token<span class="token punctuation">&#125;</span> -n kubernetes-dashboard <span class="token operator">|</span>base64 -d  <span class="token comment">#会生成一个很长的字符串，即Token</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>copy下上述Token就行了：</p><p><img src="https://i.bmp.ovh/imgs/2022/02/84dae40830ba58a8.png"></p><p>至此，我们完成了使用 kubeadm 搭建 v1.16.2 版本的 kubernetes 集群、coredns、ipvs、flannel、dashboard。</p><hr><h2 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h2><p>如果你的集群安装过程中遇到了其他问题，我们可以使用下面的命令来进行重置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubeadm reset$ <span class="token function">ifconfig</span> cni0 down <span class="token operator">&amp;&amp;</span> <span class="token function">ip</span> <span class="token function">link</span> delete cni0$ <span class="token function">ifconfig</span> flannel.1 down <span class="token operator">&amp;&amp;</span> <span class="token function">ip</span> <span class="token function">link</span> delete flannel.1$ <span class="token function">rm</span> -rf /var/lib/cni/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubeadm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特权级与TSS</title>
      <link href="/te-quan-ji-yu-tss/"/>
      <url>/te-quan-ji-yu-tss/</url>
      
        <content type="html"><![CDATA[<p>整个计算机世界其实可以分为两个部分，<code>访问者</code>和<code>受访者</code>。访问者是动态的，具有能动性，它主动去访问各种资源。受访者是静态的，它就是被访问的资源，只能干坐着等待访问者光顾。访问者的特权级<code>可变</code>，受访者的特权级<code>不可变</code>。</p><span id="more"></span><p>CPU即是大脑，又是守卫，它负责维护计算机内的安全，将程序分为四个特权级，从高到低依次为<code>0,1,2,3</code>级，数字越小，特权越大。0特权级是<code>OS内核</code>所在的特权级，PC在启动之处就以0级运行，当MBR从BIOS那接完棒后，就像神一样处于最高特权级。</p><img src="https://i.bmp.ovh/imgs/2022/02/10468c6c38f2834f.png" style="zoom:50%;" /><p>OS位于最内环的0级特权，它要直接控制硬件，掌控各种核心数据，权力最大。系统程序分别为于1级和2级，运行在这两层的一般是<code>虚拟机</code>、<code>驱动程序</code>等系统服务。在最外层的是3级特权级，我们的用户程序就运行在此层，它不需要太大的能力，权力最弱。当用户程序需要完成更深层的功能时，应当进行特权级跨越，进入系统服务层或OS内核来执行。</p><h2 id="TSS简介"><a href="#TSS简介" class="headerlink" title="TSS简介"></a>TSS简介</h2><p>TSS，即<code>Task State Segment</code>，意为任务状态段，和特权级有着密不可分的联系。TSS是处理器在<code>硬件层面</code>上原生支持<code>多任务</code>的一种数据结构，也就是说，CPU在硬件上就已经为OS提供了完成多任务的一种解决方法（不过后来OS并不买账）。</p><p>就像每个任务都有自己的<code>LDT</code>一样，任何一个任务都有独自的<code>TSS</code>，它用于标识一个任务并存储相关信息，相当于身份证，任务拥有此结构才能运行。注意，TSS是处理器硬件上用于任务管理的系统结构，处理器能够<code>自动</code>识别其中每一个字段代表什么，因此开发者只需按意义指定每个字段的值即可，其结构为：</p><img src = 'https://i.bmp.ovh/imgs/2022/02/72036687bde47a0d.png' style="zoom:67%;" /><p>这个结构看上去很复杂，一共26个字段，104字节。实际上，104字节只是TSS的最小尺寸，按照需要还可以再接上个IO位图，不过这些现在不考虑。这里简单介绍一下第28字节及以上的一些字段：</p><p><code>cr3</code>字段同理cr3寄存器，指向该任务所用的<code>页目录</code>基址。<code>ESP</code>为该任务的堆栈段的栈顶指针，即该任务的LDT中的堆栈段的栈顶地址。<code>CS</code>为该任务的代码段，即LDT中代码段的<code>选择子</code>、<code>SS</code>为该任务的堆栈段，即LDT中堆栈段的<code>选择子</code>。顾名思义，<code>LDT</code>就是该任务的LDT<code>选择子</code>。这里给出一个简单的任务TSS示例：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">[SECTION .TSSB]ALIGN32[BITS32]LABEL_TSSB:DD0; BackDDTopOfStackB; 0 级堆栈DDSelectorStackB; DD0; 1 级堆栈DD0; DD0; 2 级堆栈DD0; DDPageDirBase1; CR3DD0; EIPDD0; EFLAGSDD0; EAXDD0; ECXDD0; EDXDD0; EBXDDTopOfStackLDTB; ESPDD0; EBPDD0; ESIDD0; EDIDD0; ESDDSelectorLDTBCodeB; CSDDSelectorLDTBStack; SSDD0; DSDD0; FSDD0; GSDDSelectorLDTB; LDTDW0; 调试陷阱标志DW$ - LABEL_TSSB + 2; I&#x2F;O位图基址DB0ffh; I&#x2F;O位图结束标志TSSBLenequ$ - LABEL_TSSB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而真正和特权级相关联的，是28字节一下的内容，即3个堆栈段选择子和3个栈偏移，这里着重介绍下这6个字段。</p><p>在没有操作系统的情况下，可以认为进程就是任务，任务就是一段在处理器上运行的程序，相当于某个计算机高手在能够脱离OS执行代码，直接控制硬件。但是有了OS之后，程序被分为了<code>用户程序</code>和<code>操作系统内核程序</code>，故，一个完整的任务也被分为<code>用户部分</code>和<code>内核部分</code>两部分。由于内核程序位于0特权级，用户程序位于3特权级，所以，一个任务按特权级来划分的话，实质上是被分成了3特权级的用户程序和0特权级的内核程序，这两部分加在一起才是能让处理器完整运行的程序，也就是说，<code>完整的任务要经历这两种特权级的变化</code>。所以，我们平时在Linux下所写的程序只是个<strong>半成品</strong>，咱们只负责完成用户态下的部分，内核的部分由操作系统提供。</p><p>任务是由处理器执行的，任务在特权级变换时，本质上是处理器的<code>当前特权级CPL</code>在变换，由一个特权级变成了另一个特权级，这就开始涉及栈的问题了。处理器固定，在不同的特权级下，应该用不同特权级的栈，原因是如果在同一个栈中容纳所有特权级的的数据时，这种交叉引用会使栈变得非常混乱。并且，用一个栈容纳多个特权级下的数据，栈容量有限，这很容易溢出。因此，一个任务在每个特权级下只能用该特权级的栈。</p><p>每个任务的每个特权级下只能有一个栈，也就是说，一共4个特权级，一个任务最多4个栈，那么为什么TSS中只有3对堆栈段选择子和栈偏移呢？要搞清楚这个问题，得先弄明白TSS中记录的3个栈是用来干什么的。</p><p>刚才说过，当处理器要进入不同的的特权级时，它自动在TSS中找到同特权级（目标特权级）的栈，由于TSS是硬件结构，所以处理器可以直接识别各字段的意义。</p><p>特权级转移分为两类：</p><p>1&gt; 由<code>中断门</code>、<code>调用门</code>等手段实现低特权级向高特权级转移；</p><p>2&gt; 由<code>调用返回指令</code>从高特权级返回到低特权级，这是<strong>唯一</strong>能够处理器降低特权级的情况；</p><p>对于第1种，当处理器要从低向高跳转时，会提前将目标栈记录在某个地方，当实行跳转时再从中取出来加载到<code>SS</code>和<code>ESP</code>中以转换栈，TSS中的3对栈字段就是那个用来存放的地方。由于除了返回指令，处理器只能<code>由低到高</code>跳转，所以TSS中所记录的栈是转移后的高特权级目标栈，所以它一定要比当前特权级要高。这样就明白了，TSS中不会记录第3特权级的栈，因为没有更低特权级向它转移。</p><p>对于第2种，由高特权级返回到低特权级，处理器已经不需要从TSS中找对应的目标栈了，因为此时要返回到的低特权级的地址其实已经被暂存起来了，这就是由转移指令（<code>int</code>、<code>call</code>）的机制来决定的，换句话说，处理器知道去哪里找低特权级的目标栈。</p><img src="https://i.bmp.ovh/imgs/2022/02/c95bebd5c32659c5.png" style="zoom:67%;" /><p>如上图所示，当处理器由低特权级向高特权级跳转时，会自动的当时低特权级的栈地址（<code>ss</code>和<code>esp</code>）压入了转移后的高特权级所在的栈中。当返回指令如<code>retf</code>或<code>iret</code>从高特权级向低特权级中返回时，处理器可以从当前使用的高特权级的栈中获取低特权级的栈段选择子以及偏移量。具体过程参考<code>call-ret</code>的机制。</p><p>那处理器是怎么找到TSS的呢？</p><p>TSS是硬件支持的数据结构，它和GDT等一样，由软件填写其内容，由硬件使用。GDT要加载到寄存器<code>GDTR</code>中才能处理器找到，TSS也一样，由<code>TR (Task Register)</code>寄存器加载的，每次处理器执行不同任务时，将TR寄存器加载不同任务的TSS就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中断和异常</title>
      <link href="/zhong-duan-he-yi-chang/"/>
      <url>/zhong-duan-he-yi-chang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nasm探测机器内存</title>
      <link href="/nasm-tan-ce-ji-qi-nei-cun/"/>
      <url>/nasm-tan-ce-ji-qi-nei-cun/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDT与描述符</title>
      <link href="/gdt-yu-miao-shu-fu/"/>
      <url>/gdt-yu-miao-shu-fu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实模式到保护模式</title>
      <link href="/shi-mo-shi-dao-bao-hu-mo-shi/"/>
      <url>/shi-mo-shi-dao-bao-hu-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>在不知道保护模式之前，让我们先看一段代码，如果没有接触过保护模式，会一头雾水，不过没关系，在这种好奇心的驱使下，会学的更高效。</p><span id="more"></span><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;; pmtest1.asm; 编译方法：nasm pmtest1.asm -o pmtest1.com; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;%include&quot;pm.inc&quot;; 常量, 宏, 以及一些说明org07c00hjmpLABEL_BEGIN[SECTION .gdt]; GDT;                                         段基址,      段界限     , 属性LABEL_GDT:Descriptor       0,                0, 0     ; 空描述符LABEL_DESC_CODE32:Descriptor       0, SegCode32Len - 1, DA_C + DA_32; 非一致代码段, 32LABEL_DESC_VIDEO:Descriptor 0B8000h,           0ffffh, DA_DRW; 显存首地址; GDT 结束GdtLenequ$ - LABEL_GDT; GDT长度GdtPtrdwGdtLen - 1; GDT界限dd0; GDT基地址; GDT 选择子SelectorCode32equLABEL_DESC_CODE32- LABEL_GDTSelectorVideoequLABEL_DESC_VIDEO- LABEL_GDT; END of [SECTION .gdt][SECTION .s16][BITS16]LABEL_BEGIN:movax, csmovds, axmoves, axmovss, axmovsp, 0100h; 初始化 32 位代码段描述符; 旨在将LABEL_SEG_CODE32设为保护模式的基址xoreax, eaxmovax, csshleax, 4addeax, LABEL_SEG_CODE32movword [LABEL_DESC_CODE32 + 2], axshreax, 16movbyte [LABEL_DESC_CODE32 + 4], almovbyte [LABEL_DESC_CODE32 + 7], ah; 为加载 GDTR 作准备xoreax, eaxmovax, dsshleax, 4addeax, LABEL_GDT; eax &lt;- gdt 基地址movdword [GdtPtr + 2], eax; [GdtPtr + 2] &lt;- gdt 基地址; 加载 GDTRlgdt[GdtPtr] ; 将GdtPtr指示的6字节加载到寄存器gdtr,其中32为GDT基地址,16为GDT界限; 关中断cli; 打开地址线A20,即第20号地址位(从0开始)，超过了1MB，开机时默认关闭; 只有打开才能寻1MB以外的空间inal, 92horal, 00000010bout92h, al; 准备切换到保护模式; 将寄存器cr0的第0号位置设为1，相当于打开了保护模式的开关moveax, cr0oreax, 1movcr0, eax; 真正进入保护模式jmpdword SelectorCode32:0; 执行这一句会把 SelectorCode32 装入 cs, 并跳转到 Code32Selector:0  处; END of [SECTION .s16][SECTION .s32]; 32 位代码段. 由实模式跳入.[BITS32]LABEL_SEG_CODE32:movax, SelectorVideomovgs, ax; 视频段选择子(目的)movedi, (80 * 10 + 0) * 2; 屏幕第 10 行, 第 0 列。movah, 0Ch; 0000: 黑底    1100: 红字moval, &#39;P&#39;mov[gs:edi], ax; 到此停止jmp$SegCode32Lenequ$ - LABEL_SEG_CODE32; END of [SECTION .s32]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码会将OS从实模式跳转到保护模式，然后在屏幕的第10行第0列输出黑底红字的P，让我们先运行下看看效果，这里使用的工具为：Ubuntu虚拟机 + NASM + Bochs + FreeDos。</p><p>最基础的，可以将上如代码编译为pmtest1.bin然后直接写入Boot Sector（引导扇区），这样做很方便，可以直接运行，不需要FreeDos。但是，有个很明显的缺点，就是空间有限，限制为512B，一旦代码量大了起来就不行了，所以不是长久之计。</p><p>解决上述问题有两个方法，一个是写一个Boot Sector，然后是它读取我们写的程序并运行，即引导我们写的OS内核，不过难度较大。第二个方法就是借助别的东西，比如DOS，我们把程序编译成<code>COM</code>文件，然后让DOS来执行它，这里，我们使用<code>FreeDos</code>来完成这个任务。</p><p>首先去Bochs官方下载一个FreeDos，主要用到其中的<code>a.img</code>。解压后，将a.img复制到工作目录，更名为<code>freedos.img</code>。</p><p>用<code>bximage</code>生成一个<code>软盘镜像</code>，起名为<code>pm.img</code>。</p><p>新建文件<code>bochsrc</code>，内容如下，重点为floppya、floppyb和boot：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">megs<span class="token punctuation">:</span><span class="token number">32</span>romimage<span class="token punctuation">:</span>file=$BXSHARE/BIOS<span class="token punctuation">-</span>bochs<span class="token punctuation">-</span>latestvgaromimage<span class="token punctuation">:</span>file=$BXSHARE/VGABIOS<span class="token punctuation">-</span>lgpl<span class="token punctuation">-</span>latestfloppya<span class="token punctuation">:</span>1_44=freedos.img<span class="token punctuation">,</span>status=insertedfloppyb<span class="token punctuation">:</span>1_44=pm.img<span class="token punctuation">,</span>status=inserted<span class="token comment">#软盘映射</span>boot<span class="token punctuation">:</span>a<span class="token comment">#硬盘</span><span class="token comment">#boot:disk</span><span class="token comment">#分配HD为60M，根据分配硬盘大小，cylinders, heads, spt会变化</span><span class="token comment">#ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14</span><span class="token comment">#ata0-master: type=disk, mode=flat, path="boot.img", cylinders=121, heads=16, spt=63</span>log<span class="token punctuation">:</span>bochsout.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>bochs -f bochsrc</code>启动Bochs，待FreeDos启动完毕后格式化B盘：</p><p><img src="https://i.bmp.ovh/imgs/2022/02/597d1f0674ed20d5.png"></p><p>这里说下为什么要用Ubuntu，因为Linux的挂载（<code>mount</code>）操作可以将宿主目录和Dos中的镜像关联起来，轻易实现将目标文件复制到Dos运行的镜像中。首先，编译出.COM文件，然后将其复制到虚拟软盘pm.img上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nasm pmtest1.asm -o pmtest1.com<span class="token function">sudo</span> <span class="token function">mount</span> -o loop pm.img /mnt/floppy<span class="token function">sudo</span> <span class="token function">cp</span> pmtest1.com /mnt/floppy/<span class="token function">sudo</span> <span class="token function">umount</span> /mnt/floppy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后到FreeDos中，执行命令：<code>B:\pmtest1.com</code>，就运行起来了，如图所示，显示一个红色的p。</p><p><img src="https://i.bmp.ovh/imgs/2022/02/e8e4882d1409b8c8.png"></p><p>好了，演示完毕，接下来开始介绍各部分代码的含义，由此了解保护模式，不过更重要的，是要先了解保护模式的一些历史。</p><h2 id="初始保护模式"><a href="#初始保护模式" class="headerlink" title="初始保护模式"></a>初始保护模式</h2><p>保护模式重在“保护”二字，顾名思义，其主要提供了安全上的服务，那它到底安全在哪？保护了什么？这个还在要从8086的16位寄存器时开始说起。</p><p>在Intel 8086中，CPU是16位的，它有着16位的寄存器、16位的数据总线以及20位的地址总线，共1MB的寻址空间，由于数据总线是少于地址总线的，所以物理地址是又<code>段:偏移</code>组成的，两者都是16位。</p><blockquote><p>物理地址 = 段基址*16 + 偏移</p></blockquote><p>上述模式就是我们后来所称的实模式，它的弊端是很大的：</p><p>1&gt;    操作系统和用户程序属于同一特权级，平起平坐，没有区别；</p><p>2&gt;    用户程序引用的地址直接为<code>物理地址</code>，即逻辑地址=物理地址，指哪打哪，没有限制很不安全；</p><p>3&gt;    用户程序可以自由设定段基址，在1MB空间中随意访问，不安全;</p><p>4&gt;    16位寄存器只能访问64KB，所以当访问的地址跨越64KB时，需要更改段基址，很麻烦;</p><p>5&gt;    一次只能运行一个程序，无法充分利用计算机资源;</p><p>6&gt;    最大的弊端，空间只有1MB，这在20年前就已经不够用了;</p><p>其中，(1)(2)(3)是安全方面的缺陷，没有安全可言的CPU是注定不可依赖的，它从本质上决定了程序乃至操作系统的数据有被随意删改的风险。(4)(5)是使用方面的缺陷，这个再20年前似乎还能忍受，但是随着计算需求的提升必会被淘汰。最硬伤的就是(6)，1MB完全不够用，因此急需更高的寻址空间。</p><p>从80286开始，Intel的CPU进入32位时代，32位CPU具有两种运行模式，分别为<code>实模式</code>和<code>保护模式</code>，可以兼容8086时代的16位运行环境。实际上，在8086时代，16位CPU根本没有实模式的概念！当时的人用的只有16位CPU，他们从没想过自己习惯的模式还要重新命名。直到CPU发展到了32位，新的运行模式和之前不大相同，但不管怎么发展，都一定要满足一个原则：<code>兼容</code>。</p><p>也就是说，32位CPU具有两种模式，一种是为了克服8086运行模式弊端的新模式，即它自己的运行模式；另一种就是为了兼容8086运行模式而存在的，实模式。为了凸显前者的优势，将其称为保护模式。再强调一遍：</p><blockquote><p>实模式是32CPU时才提出的概念，旨在兼容8086的16位运行模式</p></blockquote><p>实模式的运行环境为16位，保护模式为32位。但是要注意的是，当PC运行在实模式下时，CPU依然是32位，硬件本身不会变！相当于高中生去做初中生的题，当它处在16位的运行模式时，依然可以处理32位的操作数，因为它在硬件层面上是32位的。也即：</p><blockquote><p>实模式指32位CPU运行在16位模式下的状态，但CPU本身是32位的，依然可以处理32位操作数</p></blockquote><p>了解完其基础概念后，来看看保护模式究竟从哪些方面得到了进化。</p><h2 id="寄存器扩展"><a href="#寄存器扩展" class="headerlink" title="寄存器扩展"></a>寄存器扩展</h2><p>无论PC怎么发展，兼容都是最基本的要求，包括寄存器、访存方式、指令格式等的兼容。CPU发展到了32位后，地址总线和数据总线也发展到了32位，即寻址空间夸大到了4GB，一次可以处理的操作数升至32位。4GB的空间如果还用曾经的<code>段:偏移</code>法来寻址的话，段基址要左移16位，这显然很不合适。</p><p>最关键的，从设计思想上将，段基址本身就应该是某个内存段的起始地址，它不应该在应用前先做个处理。在原来的16位模式下，由于数据总线小于地址总线，所以迫不得已预先将段基址*16，才产生了这种蹩脚的方式。现在，数据总线和地址总线一样宽了，就可从根本上解决这个问题——扩展寄存器到32位。</p><p>寄存器要保持向下兼容，不能推翻之前的方案重来，因此要在原有16位的基础上向高位扩展16位，延申到32位，新的寄存器用前缀e表示扩展，即eax、ebx等等，如图：</p> <img src="https://i.bmp.ovh/imgs/2022/02/477588c3761f2737.png" style="zoom:80%;" /><p>可以看到，通用寄存器、标志寄存器、指令指针寄存器都扩展到了32位，但是段寄存器没有，仍然只有32位，这是因为段寄存器16位就够用了，这个后面会解释到。</p><p>上图中，寄存器的低16位是为了兼容实模式的，在任何模式下都可以<code>单独使用</code>，但是高16位不行，必须在引用32位寄存器时才能用到他们。</p><p>之前提到过，在80286之后，引入了保护模式的概念，大大提高了安全性，其中很重要的一部分，就是对内存段的描述。它改变了段基址的实质，引入了<code>GRT(Global Descriptor Table)</code>的概念。</p><h2 id="GDT"><a href="#GDT" class="headerlink" title="GDT"></a>GDT</h2><p>保护模式下，偏移地址和实模式是一样的，但是段基址不再是简单的一个地址了。之前说过，实模式下段基址可以任意设定，随意访问空间内的任何地方，很不安全。因此为了更加安全，要给它加一些约束条件，这些约束条件就是对内存段的描述信息。由于信息太多了，所以专门找了个数据结构——全局描述符表，即<code>GDT</code>。该表很大，故放在了内存中，由<code>GDTR</code>寄存器指向它的首址，这个寄存器有6字节。</p><p>既然是表，那一定有表项，每一个表项就是一个<code>段描述符</code>，大小为8字节，用来描述一个内存段的段基址、段界限和段属性等等。注意，表项就是描述符，而不是描述符的索引。不过这里不会详细介绍，只浅谈一下即可，后面会专门开一篇博客专门介绍GDT和描述符。</p><p><img src="https://i.bmp.ovh/imgs/2022/02/ccabd82c4185bc24.png"></p><p>这样，段寄存器中保存的再也不是段基址了，里面保存的内容叫<code>选择子</code>，selector。实际上，这个选择子就是个<code>数</code>，用这个数来<code>索引</code>GDT中的段描述符。把全局描述符当成数组，选择子就像数组下标一样。</p><blockquote><p>1&gt; 段描述符是在内存中的，访问会很耗时</p><p>2&gt; 段描述符的格式很奇怪，CPU把这些七零八落的数拼凑起来也会耗时</p></blockquote><p>既然访问内存中的段描述符很耗时间，那CPU如何提高效率呢？使用缓存。在80286的保护模式中，为了提高获取段信息的效率，对段寄存器率先应用了缓存技术，将段信息用一个寄存器来缓存，这就是<code>段描述符缓冲寄存器</code>。对程序员而言它是不可见的。CPU每次访问描述符并获取到内存段信息后，会将其存入上述缓冲寄存器中，下次访问相同段时，直接从中取就行了。</p><p>另外，虽然段描述符缓冲寄存器是保护模式下的产物，但是它也可以用在实模式下。在16为的实模式下，段基址左移4位这个操作也是耗时的。因此，CPU会将段基址左移后的结果存在上述寄存器中，以后每次引用这个段时，就直接走缓冲寄存器，直到换段，也就是段寄存器被重新赋值。</p><p>在进入代码解释之前按，先简单概括下描述符各属性的含义：</p><p><strong>P位</strong>：存在位，P=1表示段在内存中存在；P=0表示在内存中不存在。</p><p><strong>DPL</strong>：描述符特权级（Privilege Level），可以是0123，数字越小特权级越大。</p><p><strong>S位</strong>：指明描述符是数据段/代码段（S=1）还是系统段/门描述符（S=0）.</p><p><strong>TYPE</strong>：描述符类型，详情见下表：</p><img src="https://i.bmp.ovh/imgs/2022/02/331f5d92ee10678c.png" style="zoom: 67%;" /><p>其中，当S=1时，TYPE&lt;8对应数据段，&gt;=8对应代码段；当S=0时，TYPE&lt;8对应系统段，&gt;=8对应门描述符。</p><p><strong>G位</strong>：段界限粒度（Granularity）位。G=0时段界限为字节；G=1时段界限粒度为4KB。</p><p><strong>D/B位</strong>：这一位比较复杂，分三种情况：</p><ul><li>   在可执行代码段描述符中，这一位叫做D位。D=1时，在默认情况下指令使用32位地址以及32位或8位操作数；D=0时，在默认情况下使用16位地址以及16位或8位操作数；</li><li>   在向下扩展数据段的描述符中，这一位叫做B位。B=1时，段的上部界限为4GB；B=0时，段的上部界限为64KB；</li><li>   在描述堆栈段（由ss寄存器指向的段）的描述符中，这一位叫做B位。B=1时，隐式的堆栈访问指令（如push、pop和call）使用32位堆栈指针寄存器esp；D=0时，隐式的堆栈访问指令（如push、pop和call）使用16位堆栈指针寄存器sp；</li></ul><p><strong>AVL位</strong>：保留位：可以被系统软件使用。</p><h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p>好了，知道保护模式和GDT的相关基础后，可以开始通过解释文初的代码来进一步学习保护模式了。</p><p>代码一共分为三个部分，即三个段：[SECTION .gdt]、[SECTION .s16]、[SECTION .s32]。顾名思义，第一部分定义了GDT，第二部分为16位环境下运行的代码，即实模式，第三部分为32位环境下运行的代码，即保护模式。我们一个一个看。</p><h3 id="SECTION-gdt"><a href="#SECTION-gdt" class="headerlink" title="[SECTION .gdt]"></a>[SECTION .gdt]</h3><p>这个部分定义了一个数组，每一个元素都是一个<code>Descriptor</code>，很明显，这个数组就是<code>GDT</code>。其中，<code>Descriptor</code>是一个宏，这个宏用比较自动化的方法把段基址、段界限和段属性放入一个描述符中合适的位置，这个宏在pm.inc中，内容如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; 描述符; usage: Descriptor Base, Limit, Attr;        Base:  dd;        Limit: dd (low 20 bits available);        Attr:  dw (lower 4 bits of higher byte are always 0)%macro Descriptor 3dw%2 &amp; 0FFFFh; 段界限 1(2 字节)dw%1 &amp; 0FFFFh; 段基址 1(2 字节)db(%1 &gt;&gt; 16) &amp; 0FFh; 段基址 2(1 字节)dw((%2 &gt;&gt; 8) &amp; 0F00h) | (%3 &amp; 0F0FFh); 属性 1 + 段界限 2 + 属性 2(2 字节)db(%1 &gt;&gt; 24) &amp; 0FFh; 段基址 3(1 字节)%endmacro ; 共 8 字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的GDT中共有3个描述符，为方便起见，这里分别简称为DESC_DUMMY、DESC_CODE32和DESC_VIDEO。其中DESC_VIDEO的段基址是<code>0B800h</code>，这个地址是显存的起始地址，故该描述符指向了显存。</p><p>段基址和段界限都好说，来看下段属性。DESC_CODE32的属性为<code>DA_C + DA_32</code>，DESC_VIDEO的属性为<code>DA_DRW</code>。这些值都定义在pm.inc中：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">;---------------------------------------------------------------; 描述符类型值说明; 其中:;       DA_  : Descriptor Attribute;       D    : 数据段;       C    : 代码段;       S    : 系统段;       R    : 只读;       RW   : 读写;       A    : 已访问;       其它 : 可按照字面意思理解;---------------------------------------------------------------DA_32EQU4000h; 32 位段DA_DPL0EQU  00h; DPL &#x3D; 0DA_DPL1EQU  20h; DPL &#x3D; 1DA_DPL2EQU  40h; DPL &#x3D; 2DA_DPL3EQU  60h; DPL &#x3D; 3;---------------------------------------------------------------; 存储段描述符类型值说明;---------------------------------------------------------------DA_DREQU90h; 存在的只读数据段类型值DA_DRWEQU92h; 存在的可读写数据段属性值DA_DRWAEQU93h; 存在的已访问可读写数据段类型值DA_CEQU98h; 存在的只执行代码段属性值DA_CREQU9Ah; 存在的可执行可读代码段属性值DA_CCOEQU9Ch; 存在的只执行一致代码段属性值DA_CCOREQU9Eh; 存在的可执行可读一致代码段属性值;---------------------------------------------------------------; 系统段描述符类型值说明;---------------------------------------------------------------DA_LDTEQU  82h; 局部描述符表段类型值DA_TaskGateEQU  85h; 任务门类型值DA_386TSSEQU  89h; 可用 386 任务状态段类型值DA_386CGateEQU  8Ch; 386 调用门类型值DA_386IGateEQU  8Eh; 386 中断门类型值DA_386TGateEQU  8Fh; 386 陷阱门类型值;---------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DA_C + DA_32的二进制为<code>0100 0000 1001 1000</code>，更具描述符TYPE的含义可知该内存段为<strong>存在的只执行的32位代码段，DPL为0</strong>。同理可知，DESC_VIDEO段为<strong>可读写数据段</strong>。</p><p>定义完GDT后，用变量<code>GdtLen</code>存储GDT的长度，结构变量<code>GdtPtr</code>存储GDT的长度和基地址。</p><p>随后，开始存储后两个描述符的<code>选择子</code>，可以看到，<code>SelectorCode32</code>和<code>SelectorVideo</code>分别存储了DESC_CODE32和DESC_VIDEO相对于GDT首址的偏移，这个数就是他们各自的选择子。实际上，选择子不止是一个偏移，它的结构要稍微复杂一些，这里不详细介绍。</p><p>数据结构<code>GdtPtr</code>是用来记录GDT界限和GDT基址的。前文提到过，<code>GDTR</code>寄存器要指向GDT的首址，先来看看这个寄存器的结构：</p><p><img src="https://i.bmp.ovh/imgs/2022/02/71d060da237efc08.png"></p><p>可以看到，这个寄存器和我们定义的<code>GdtPtr</code>结构是一样的，实际上，定义<code>GdtPtr</code>的目的就是将其赋值给<code>GDTR</code>。</p><h2 id="SECTION-s32"><a href="#SECTION-s32" class="headerlink" title="[SECTION .s32]"></a>[SECTION .s32]</h2><p>这个部分为保护模式下要执行的代码，目的很简单，在指定位置打印一个红色的P。首先，把显存的内存段也就是描述符DESC_VIDEO的<code>选择子</code>写入段寄存器<code>GS</code>:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movax, SelectorVideomovgs, ax; 视频段选择子(目的)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着，把想要显示的位置写入<code>edi</code>，然后通过<code>[gs:edi]</code>要显示的东西写入显存的对应位置中：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movedi, (80 * 10 + 0) * 2; 屏幕第 10 行, 第 0 列。movah, 0Ch; 0000: 黑底    1100: 红字moval, &#39;P&#39;mov[gs:edi], ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保护模式运行的代码到此为止，使用一个死循环来停在此处即可。可以看到，这部分并不难。核心目的就是把字符写入显存对应的位置，不过由于保护模式用<code>描述符</code>来表示各个内存段，因此需要借助<code>GDT</code>来完成。</p><h2 id="SECTION-s16"><a href="#SECTION-s16" class="headerlink" title="[SECTION .s16]"></a>[SECTION .s16]</h2><p>我们知道，当PC启动时，首先进入的是实模式，只有1MB的寻址空间，要转入保护模式，就需要另做一些操作，比如打开某些开关，然后<code>jmp</code>到保护模式，[SECTION .s16]就是在实模式中做这些事的。</p><p>在将cs、ds、es、ss相统一之后，开始初始化保护模式代码段描述符。因为最后要跳到保护模式所在的内存段（代码段），因此需要一个描述符来存储它，就是<code>DESC_CODE32</code>，不过由于描述符结构比较蹩脚，所以得分步来赋值。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; 初始化 32 位代码段描述符xoreax, eaxmovax, csshleax, 4addeax, LABEL_SEG_CODE32movword [LABEL_DESC_CODE32 + 2], axshreax, 16movbyte [LABEL_DESC_CODE32 + 4], almovbyte [LABEL_DESC_CODE32 + 7], ah<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化完该描述符后，开始加载GDT，即将GDT的首址和界限写入寄存器<code>GDTR</code>，期间要借助数据结构<code>GdtPtr</code>：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; 为加载 GDTR 作准备xoreax, eaxmovax, dsshleax, 4addeax, LABEL_GDT; eax &lt;- gdt 基地址movdword [GdtPtr + 2], eax; [GdtPtr + 2] &lt;- gdt 基地址; 加载 GDTRlgdt[GdtPtr]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一行的<code>lgdt</code>的作用是将以GdtPtr为首址的6字节加载到寄存器<code>GDTR</code>中。</p><p>接下来就是关中断，因为保护模式下中断处理的机制是不同的，不关掉会出错误：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; 关中断cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再下面几行的作用就是打开<code>A20</code>地址线，这里简单介绍下什么时候A20地址线。在8086中，地址线只有20位，空间为1MB，那么如果试图访问1MB之外的空间呢？系统并不会发生异常，而是<code>回卷</code>，重新从0地址开始。但是到了80286时，空间变成了4GB，访问1MB之外不再需要回卷了，这就造成了和旧模式的不兼容，怎么办呢？IBM想出一个办法，使用8042键盘控制器来控制第20号（从0开始）地址位，这就是<code>A20</code>地址线，如果不被打开，默认为0，地址会回卷。也即，<code>A20</code>是程序或OS能够访问到1MB之外的空间，可以认为是进入保护模式的第一步。代码通过操作端口92h来打开它：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; 打开地址线A20inal, 92horal, 00000010bout92h, al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，离最后的<code>jmp</code>就只差一步了，那就是打开保护模式的开关：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; 准备切换到保护模式moveax, cr0oreax, 1movcr0, eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码很简单，就是把<code>cr0</code>寄存器的第0位设1。寄存器<code>cr0</code>的第0位是PE位，此位为0时，CPU运行于实模式，为1时，CPU运行于保护模式。因此，这一步打开了进入保护模式的开关。</p><p>此时，系统已经进入了保护模式，但是<code>cs</code>仍然是实模式的值，即依然停留在实模式的代码处。因此，需要将其更改为保护模式的代码段，那就是<code>jmp</code>。通过之前定义的DESC_CODE32的选择子<code>SelectorCode32</code>，来执行保护模式处的代码：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; 真正进入保护模式jmpdword SelectorCode32:0; 执行这一句会把 SelectorCode32 装入 cs, 并跳转到 Code32Selector:0  处<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，成功进入了保护模式，下面总结一下进入保护模式的主要步骤：</p><p>1&gt;    准备GDT；</p><p>2&gt;    用lgdt加载gdtr；</p><p>3&gt;    打开A20；</p><p>4&gt;    置cr0的PE位，使系统处于保护模式；</p><p>5&gt;    跳转，进入保护模式；</p>]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unicode和UTF-8</title>
      <link href="/unicode-he-utf-8/"/>
      <url>/unicode-he-utf-8/</url>
      
        <content type="html"><![CDATA[<p>都知道Unicode编码，但我经常把它和UTF-8弄混，都是囫囵吞枣式的理解，基础不扎实。今天突然想搞清楚它俩的前世今生缘，想着连这都不知道也太Low了，就去查了查资料，发现比我想象的要复杂。</p><span id="more"></span><h2 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h2><h2 id="非ASCII码"><a href="#非ASCII码" class="headerlink" title="非ASCII码"></a>非ASCII码</h2><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><h2 id="Unicode的问题"><a href="#Unicode的问题" class="headerlink" title="Unicode的问题"></a>Unicode的问题</h2><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><h2 id="Unicode与UTF-8之间的转换"><a href="#Unicode与UTF-8之间的转换" class="headerlink" title="Unicode与UTF-8之间的转换"></a>Unicode与UTF-8之间的转换</h2><h2 id="大端对齐和小端对齐"><a href="#大端对齐和小端对齐" class="headerlink" title="大端对齐和小端对齐"></a>大端对齐和小端对齐</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker进阶(一): DockerFile解析</title>
      <link href="/docker-jin-jie-yi-dockerfile-jie-xi/"/>
      <url>/docker-jin-jie-yi-dockerfile-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条<code>构建镜像</code>所需的指令和参数构成的脚本，类似于Linux的MakeFile。现在，假设我们需要构建一个包含vim/ifconfig的ubuntu镜像，我们需要<code>run</code>一个原始ubuntun镜像，然后在其中安装vim/ifconfig，最后通过<code>commit</code>来生成镜像。但是，如果需要多次安装，就要多次重复上述commit步骤，很麻烦。那么，能不能将需要安装的东西列一个清单，然后一次性搞定呢？==&gt; Dockerfile。</p><span id="more"></span><p>Dockerfile就像一个<code>图纸</code>，把镜像需要安装的东西全部写进去，然后<code>build</code>生成镜像时一口气直接装完。可以看到，<code>commit</code>是通过Container来生成镜像的，而Dockerfile则不需要操作者通过手动运行Container来对镜像进行增强。</p><p><img src="https://img-blog.csdnimg.cn/1e96f3b77c9f4c1ca483a90b4c6112f3.png" alt="img"></p><hr><h2 id="构建过程解析"><a href="#构建过程解析" class="headerlink" title="构建过程解析"></a>构建过程解析</h2><p>每条保留字指令都必须为<code>大写字母</code>，且后面要跟随至少一个参数，如COPY保留字：</p><p><img src="https://img-blog.csdnimg.cn/a2c7708eb2ee436c970c88f58160552a.png" alt="img"></p><p>指令按照从上到下，顺序执行，<strong>每条指令都会创建一个新的<code>镜像层</code>并对镜像进行提交</strong>，#表示注释。至于镜像层，简单来说，就是Docker镜像是一层层构成的，这样才能使我们可以在一个初始镜像的基础上生成新的镜像，具体分层概念将在下一篇博客中讲述。</p><p><strong>【Dockerfile执行流程】</strong></p><p>1&gt;  Docker从基础镜像运行一个Container。</p><p>2&gt;  顺序执行一条指令并对Container作出修改。</p><p>3&gt;  执行类似<code>commit</code>的操作来提交一个新的镜像层。</p><p>4&gt;  Docker再基于刚提交的镜像运行一个新的Container。</p><p>5&gt;  执行Dockerfile中的下一条指令直到所有指令都执行完成。</p><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表了软件的三个不同阶段：</p><blockquote><p>Dockerfile使软件的设计图纸</p><p>Docker镜像使软件的交付品</p><p>Docker容器则是软件镜像的运行态，也即运行实例</p></blockquote><p><img src="https://img-blog.csdnimg.cn/34fb7878c7cd40528ad9b6cc634c9ce4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU3JjTWlMZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>总的来说，Dockerfile定义了最终的容器进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程（当应用进程需要和系统服务和内核进程打交道时，需要考虑如何设计namespace的权限控制）等等。</p><hr><h2 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h2><p>参考tomcat8的Dockerfile入门：<a href="https://github.com/docker-library/tomcat%EF%BC%8C%E8%BF%99%E9%87%8C%E7%BD%97%E5%88%97%E4%BA%8612%E4%B8%AA%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%9D%E7%95%99%E5%AD%97%E3%80%82">https://github.com/docker-library/tomcat，这里罗列了12个最常用的保留字。</a></p><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>基础镜像，说明当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，Dockerfile的第一条指令必须是FROM。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM [--platform&#x3D;&lt;platform&gt;] &lt;image&gt; [AS &lt;name&gt;]  # orFROM [--platform&#x3D;&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]  #orFROM [--platform&#x3D;&lt;platform&gt;] &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>可以通过该保留字留下维护者的姓名和邮箱地址，非必须。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">MAINTAINER &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新版本中，官方建议用<code>LABEL</code>来替代它：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">LABEL org.opencontainers.image.authors&#x3D;&quot;SvenDowideit@home.org.au&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>容器构建镜像时需要运行的命令，有两种格式，<code>shell</code>格式和<code>exec</code>格式。注意，<code>RUN</code>是在<code>docker build</code>时运行的，那为什么会和容器有关呢？就像前文说的，dockerfile每一条指令实质上就是在前一步运行的新的Container上进行操作，然后通过类似<code>commit</code>的操作来构建新镜像，所以实际上是对容器的操作。两种格式分别为：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># shell 格式RUN &lt;命令行命令&gt;# &lt;命令行命令&gt;等同于，在容器终端操作的shell命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># exec 格式RUN [&quot;可执行文件&quot;,&quot;参数1&quot;,&quot;参数2&quot;]# RUN [&quot;.&#x2F;test.php&quot;, &quot;dev&quot;, &quot;offline&quot;]等价于RUN .&#x2F;test.php dev offline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以shell格式为例，如果我们想要安装vim，那么在容器中就需要使用命令<code>yum -y install vim</code>，然后出容器使用<code>docker commit</code>来构建镜像。现在有了dockerfile，只需要在其中加一句<code>RUN yum -y install vim</code>即可，docker运行完该指令会自动commit。</p><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>暴露出容器将要提供服务所开放的端口，严格来说，是用该dockerfile构建的镜像，运行出的容器提供的服务对外暴露的端口。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">EXPOSE &lt;端口1&gt;[&#x2F;传输格式] [&lt;端口2&gt;[&#x2F;传输格式]...]# EXPOSE 8080&#x2F;tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意，<code>EXPOSE</code>指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明就开启这个端口的服务。在Dockerfile中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是<code>docker run -P</code>时，会自动随机映射EXPOSE的端口。</p><p>要将<code>EXPOSE</code>和<code>docker run -p &lt;宿主端口&gt;:&lt;容器端口&gt;</code>区分开来。-p，是将宿主端口映射向容器端口，也就是说将容器端口向宿主机外暴漏。而EXPOSE，仅仅是声明<code>容器内</code>暴露的端口。</p><p>一般使用<code>docker run -p &lt;宿主端口&gt;:EXPOSE端口</code>来指定宿主机端口和该容器暴露端口的映射，或者使用<code>-P</code>来进行随机映射。这样一想，我们最终在外部直接访问的仍然是宿主机上的端口，<code>EXPOSE</code>只是在设置<code>-p/-P</code>时提醒操作者容器内服务的端口是多少，从而构成映射吗，是不是有些鸡肋？我个人觉得是的，它只是起到声明和提醒的作用。</p><p>但是，<code>EXPOSE</code>也有中有趣的玩法，那就是不使用端口映射，让端口直接暴露在宿主机外。怎么做？==&gt; host模式。在<code>docker run</code>时设置<code>--net=host</code>，这样一来容器就和宿主机公用同样的网络配置，包括端口。运行之后，使用<code>docker inspect containerID </code>发现没有任何端口映射信息，因为容器的端口直接就是宿主机的端口。</p><p><img src="https://img-blog.csdnimg.cn/ee6b3d3a19dd40fba1c422850a0e7c09.png" alt="img"></p><p>这样一来，就可以在使用EXPOSE端口来访问容器内的服务了，不再需要-p/-P映射。</p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>指定构建的镜像运行出容器后，终端默认的初始工作目录，也就是落脚点。比如，tomcat容器的落脚点为<code>/usr/local/tomcat</code>，它的dockerfile就这样写：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;tomcat# ...WORKDIR $CATALINA_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>指定该镜像以什么样的用户去执行，如果都不指定，默认为<code>root</code></p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">USER &lt;user&gt;[:&lt;group&gt;] #orUSER &lt;UID&gt;[:&lt;GID&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>用来在构建镜像过程中设置环境变量，注意，是<code>构建过程中</code>，不是构建后。这个环境变量可以在后续的任何<code>RUN</code>指令中使用，也可以在其他指令中直接使用，比如<code>WORKDIR</code>，引用时加<code>$</code>。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">ENV NAME VALUE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>容器数据卷，不用多说，相当于<code>docker run -v ...</code>，用于数据保存和持久化工作。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM ubuntuRUN mkdir &#x2F;myvolRUN echo &quot;hello world&quot; &gt; &#x2F;myvol&#x2F;greetingVOLUME &#x2F;myvol<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上述指令会在容器的<code> /myvol</code>目录下设置一个挂载点，并在宿主机上创建一个数据卷和其相关联，由于没有指定宿主机目录，所以是默认的，类似于 <code>docker run -v /myvol 镜像名 </code>。可以使用<code>docker inspect 容器名/ID</code>来查看相关联的宿主机目录的路径，会发现数据卷名是一串编号：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;0ab0aaf0d6ef391cb68b72bd8c43216a8f8ae9205f0ae941ef16ebe32dc9fc01&#x2F;_data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然，也可以同时创建多个挂载点，每个挂载点都有独立的数据卷：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">VOLUME [&quot;&#x2F;data1&quot;,&quot;&#x2F;data2&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"Mounts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"d411f6b8f17f4418629d4e5a1ab69679dee369b39e13bb68bed77aa4a0d12d21"</span><span class="token punctuation">,</span>            <span class="token property">"Source"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/volumes/d411f6b8f17f4418629d4e5a1ab69679dee369b39e13bb68bed77aa4a0d12d21/_data"</span><span class="token punctuation">,</span>            <span class="token property">"Destination"</span><span class="token operator">:</span> <span class="token string">"/data1"</span><span class="token punctuation">,</span>            <span class="token property">"Driver"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>            <span class="token property">"Mode"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"RW"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"6d3badcf47c4ac5955deda6f6ae56f4aaf1037a871275f46220c14ebd762fc36"</span><span class="token punctuation">,</span>            <span class="token property">"Source"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/volumes/6d3badcf47c4ac5955deda6f6ae56f4aaf1037a871275f46220c14ebd762fc36/_data"</span><span class="token punctuation">,</span>            <span class="token property">"Destination"</span><span class="token operator">:</span> <span class="token string">"/data2"</span><span class="token punctuation">,</span>            <span class="token property">"Driver"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>            <span class="token property">"Mode"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"RW"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>把宿主机目录下的文件和目录拷贝进镜像中，将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY src dest #orCOPY [&quot;src&quot;,&quot;dest&quot;]# &lt;src源路径&gt;：源文件或者源目录# &lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包，即<code>COPY</code>的升级版：COPY+解压，一般用这个就行。</p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>指定容器启动后要干的事情。注意，这个容器是运行最终镜像的容器，而不是构建镜像过程中的临时容器，也就是说，这个时候已经和镜像的构建无关了。</p><blockquote><p>RUN是在docker build时运行</p><p>CMD是在docker run时运行</p></blockquote><p><code>CMD</code>指令和<code>RUN</code>的格式相似，外加了一个参数列表格式：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># shell 格式CMD &lt;命令&gt;# exec 格式CMD [&quot;可执行文件&quot;,&quot;参数1&quot;,&quot;参数2&quot;...]# 参数列表格式，在指定了ENTRYPOINT后，用CMD指定具体参数CMD [&quot;参数1&quot;,&quot;参数2&quot;...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dockerfile中可以有多个CMD指令，但只有<code>最后一个</code>生效，并且，CMD会被<code>docker run</code>设定的运行命令替换。比如，tomcat的dockerfile的最后一行为：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD [&quot;catalina.sh&quot;, &quot;run&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即，运行tomcat容器后会在WORKDIR下执行命令<code>catalina.sh run </code>。但是，如果在<code>docker run</code>之后加入了<code>/bin/bash</code>，就会发现tomcat服务并没有启动，因为原本应该执行的<code>catalina.sh run</code>被自己写的<code>/bin/bash</code>覆盖了，因此只启动了容器，并没有启动服务。</p><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>也是用来指定一个容器启动时要运行的命令，类似于<code>CMD</code>指令，但不同的是，<code>ENTRYPOINT</code>不会被<code>docker run </code>后面的命令覆盖，而且这些命令行参数会被当作参数送给<code>ENTRYPOINT</code>指令指定的程序。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile"># exec 格式ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]# shell 格式ENTRYPOINT command param1 param2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>ENTRYPOINT</code>可以和<code>CMD</code>一起使用，一般是变参才会使用CMD，这里的CMD等于是在给ENTRYPOINT传参。当指定了ENTRYPOINT之后，CMD的含义就发生了变化，不再是直接运行其命令，而是将CMD的内容作为参数传递给ENTRYPOINT，它们两个组合成<code>&lt;ENTRYPOINT&gt;&lt;CMD&gt;</code> 来执行。</p><p>比如，通过Dokcerfile构建nginx:test镜像，规定运行时指令，分为定参和变参两部分：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM nginx#...ENTRYPOINT [&quot;nginx&quot;,&quot;-c&quot;] # 定参CMD [&quot;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&quot;] # 变参<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th></th><th>不传参</th><th>传参</th></tr></thead><tbody><tr><td>Docker命令</td><td>docker run nginx:test</td><td>docker run nginx:test /etc/nginx/new.conf</td></tr><tr><td>衍生出的容器命令</td><td>nginx -c /etc/nginx/nginx.conf</td><td>nginx -c /etc/nginx/new.conf</td></tr></tbody></table><p>如果Dockerfile中存在多个<code>ENTRYPOINT</code>指令，仅最后一个生效。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://img-blog.csdnimg.cn/c5f220a24bb0472287fc7bd95cf481e7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAU3JjTWlMZQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 云计算 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s源码(一): Pod创建流程</title>
      <link href="/k8s-yuan-ma-yi-pod-chuang-jian-liu-cheng/"/>
      <url>/k8s-yuan-ma-yi-pod-chuang-jian-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>kubelet 的工作核心，就是一个控制循环，即：<code>SyncLoop</code>。驱动整个控制循环的事件有：pod更新事件、pod生命周期变化、kubelet本身设置的执行周期、定时清理事件等。在SyncLoop循环上还有很多Manager，例如probeManager 会定时去监控 pod 中容器的健康状况、statusManager 负责维护状态信息，并把 pod 状态更新到 apiserver、ontainerRefManager 容器引用的管理等等。不过这些Manage在这里先不管，只聚焦于Pod的创建。</p><span id="more"></span><img src="https://i.bmp.ovh/imgs/2022/01/5089f514aabe5eeb.png"  /><p>注，这里使用的k8s版本号为<code>v1.9.3</code>，git commit为<code>d2835416544</code>，因为最近在学漏洞<code>CVE-2017</code>，所以选的k8s版本比较老，不过问题不大，创建Pod的主要流程基本没变。</p><h3 id="syncLoop循环监听管道信息"><a href="#syncLoop循环监听管道信息" class="headerlink" title="syncLoop循环监听管道信息"></a>syncLoop循环监听管道信息</h3><p>整个Kubelet的启动，都记录在<code>kubernetes\pkg\kubelet\kubelet.go</code>文件中的<code>Run</code>方法中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Run starts the kubelet reacting to config updates</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>updates <span class="token operator">&lt;-</span><span class="token keyword">chan</span> kubetypes<span class="token punctuation">.</span>PodUpdate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注册 logServer</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>logServer <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>logServer <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/logs/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"/var/log/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>kubeClient <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"No api server defined - no node status update will be sent."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">initializeModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>nodeRef<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>KubeletSetupFailed<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Start volume manager</span><span class="token keyword">go</span> kl<span class="token punctuation">.</span>volumeManager<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>sourcesReady<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>kubeClient <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// Start syncing node status immediately, this may set up things the runtime needs to run.</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>syncNodeStatus<span class="token punctuation">,</span> kl<span class="token punctuation">.</span>nodeStatusUpdateFrequency<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>syncNetworkStatus<span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>updateRuntimeUp<span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token comment">// Start loop to sync iptables util rules</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>makeIPTablesUtilChains <span class="token punctuation">&#123;</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>syncNetworkUtil<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Start a goroutine responsible for killing pods (that are not properly</span><span class="token comment">// handled by pod workers).</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>podKiller<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token comment">// Start gorouting responsible for checking limits in resolv.conf</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>dnsConfigurer<span class="token punctuation">.</span>ResolverConfig <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> kl<span class="token punctuation">.</span>dnsConfigurer<span class="token punctuation">.</span><span class="token function">CheckLimitsForResolvConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Start component sync loops.</span>kl<span class="token punctuation">.</span>statusManager<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>kl<span class="token punctuation">.</span>probeManager<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Start the pod lifecycle event generator.</span>    <span class="token comment">//启动 pleg 该模块主要用于周期性地向 container runtime 刷新当前所有容器的状态</span>kl<span class="token punctuation">.</span>pleg<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>kl<span class="token punctuation">.</span><span class="token function">syncLoop</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> kl<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Run</code>方法的最后，会调用<code>kl.syncLoop</code>方法来启动事件循环，方法位于<code>pkg/kubelet/kubelet.go</code>:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// syncLoop is the main loop for processing changes. It watches for changes from</span><span class="token comment">// three channels (file, apiserver, and http) and creates a union of them. For</span><span class="token comment">// any new change seen, will run a sync against desired state and running state. If</span><span class="token comment">// no changes are seen to the configuration, will synchronize the last known desired</span><span class="token comment">// state every sync-frequency seconds. Never returns.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">syncLoop</span><span class="token punctuation">(</span>updates <span class="token operator">&lt;-</span><span class="token keyword">chan</span> kubetypes<span class="token punctuation">.</span>PodUpdate<span class="token punctuation">,</span> handler SyncHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Starting kubelet main sync loop."</span><span class="token punctuation">)</span><span class="token comment">// The resyncTicker wakes up kubelet to checks if there are any pod workers</span><span class="token comment">// that need to be sync'd. A one-second period is sufficient because the</span><span class="token comment">// sync interval is defaulted to 10s.</span>syncTicker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> syncTicker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>housekeepingTicker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>housekeepingPeriod<span class="token punctuation">)</span><span class="token keyword">defer</span> housekeepingTicker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>plegCh <span class="token operator">:=</span> kl<span class="token punctuation">.</span>pleg<span class="token punctuation">.</span><span class="token function">Watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> rs <span class="token operator">:=</span> kl<span class="token punctuation">.</span>runtimeState<span class="token punctuation">.</span><span class="token function">runtimeErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"skipping pod synchronization - %v"</span><span class="token punctuation">,</span> rs<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>kl<span class="token punctuation">.</span>syncLoopMonitor<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>kl<span class="token punctuation">.</span><span class="token function">syncLoopIteration</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> syncTicker<span class="token punctuation">.</span>C<span class="token punctuation">,</span> housekeepingTicker<span class="token punctuation">.</span>C<span class="token punctuation">,</span> plegCh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>kl<span class="token punctuation">.</span>syncLoopMonitor<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>syncLoop</code>将同时 watch 3 个不同来源的 pod 信息的变化（file，http，apiserver），一旦某个来源的 pod 信息发生了更新（创建/更新/删除），这个 channel 中就会出现被更新的 pod 信息和更新的具体操作。而这个监听逻辑，主要由它调用的<code>syncLoopIteration</code>实现。</p><h3 id="syncLoopIteration"><a href="#syncLoopIteration" class="headerlink" title="syncLoopIteration"></a>syncLoopIteration</h3><p><code>syncLoopIteration</code>会从不同的管道读取，并将Pods交付给指定Handler：</p><blockquote><p>syncLoopIteration reads from various channels and dispatches pods to the given handler.</p></blockquote><p>其传入的参数有5个，1个handler和4个chan：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Arguments:</span><span class="token comment">// 1.  configCh:       a channel to read config events from</span><span class="token comment">// 2.  handler:        the SyncHandler to dispatch pods to</span><span class="token comment">// 3.  syncCh:         a channel to read periodic sync events from</span><span class="token comment">// 4.  houseKeepingCh: a channel to read housekeeping events from</span><span class="token comment">// 5.  plegCh:         a channel to read PLEG updates from</span><span class="token comment">// * configCh: dispatch the pods for the config change to the appropriate</span><span class="token comment">//             handler callback for the event type</span><span class="token comment">// * plegCh: update the runtime cache; sync pod</span><span class="token comment">// * syncCh: sync all pods waiting for sync</span><span class="token comment">// * houseKeepingCh: trigger cleanup of pods</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于只关注Pod的创建过程，因此只探讨<code>configCh</code>部分的代码即可：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">syncLoopIteration</span><span class="token punctuation">(</span>configCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> kubetypes<span class="token punctuation">.</span>PodUpdate<span class="token punctuation">,</span> handler SyncHandler<span class="token punctuation">,</span><span class="token comment">//方法会监听多个 channel，当发现任何一个 channel 有数据就交给 handler 去处理，在 handler 中通过调用 dispatchWork 分发任务</span>syncCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> housekeepingCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> plegCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token operator">*</span>pleg<span class="token punctuation">.</span>PodLifecycleEvent<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> u<span class="token punctuation">,</span> open <span class="token operator">:=</span> <span class="token operator">&lt;-</span>configCh<span class="token punctuation">:</span> <span class="token keyword">if</span> <span class="token operator">!</span>open <span class="token punctuation">&#123;</span>klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Update channel is closed. Exiting the sync loop."</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> u<span class="token punctuation">.</span>Op <span class="token punctuation">&#123;</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>ADD<span class="token punctuation">:</span>klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (ADD, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span> handler<span class="token punctuation">.</span><span class="token function">HandlePodAdditions</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>UPDATE<span class="token punctuation">:</span>klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (UPDATE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">PodsWithDeletionTimestamps</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodUpdates</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>REMOVE<span class="token punctuation">:</span>klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (REMOVE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodRemoves</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>RECONCILE<span class="token punctuation">:</span>klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (RECONCILE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodReconcile</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>DELETE<span class="token punctuation">:</span>klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (DELETE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span> handler<span class="token punctuation">.</span><span class="token function">HandlePodUpdates</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>SET<span class="token punctuation">:</span> klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Kubelet does not support snapshot update"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Invalid event type received: %d."</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Op<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>kl<span class="token punctuation">.</span>sourcesReady<span class="token punctuation">.</span><span class="token function">AddSource</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Source<span class="token punctuation">)</span> <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，该模块会根据<code>configCh</code>中的<code>u.Op</code>来选择对Pods的处理方式。当事件类型为<code>ADD</code>时，即调用<code>HandlePodAdditions</code>接口创建Pods。</p><h3 id="HandlePodAdditions"><a href="#HandlePodAdditions" class="headerlink" title="HandlePodAdditions"></a>HandlePodAdditions</h3><p>进入该接口实现体看下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// HandlePodAdditions is the callback in SyncHandler for pods being added from</span><span class="token comment">// a config source.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">HandlePodAdditions</span><span class="token punctuation">(</span>pods <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>start <span class="token operator">:=</span> kl<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 将待创建的Pods按创建时间排序</span>sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>sliceutils<span class="token punctuation">.</span><span class="token function">PodsByCreationTime</span><span class="token punctuation">(</span>pods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pod <span class="token operator">:=</span> <span class="token keyword">range</span> pods <span class="token punctuation">&#123;</span><span class="token comment">// 获取当前Pod管理器中已存在的Pods</span>existingPods <span class="token operator">:=</span> kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">GetPods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Always add the pod to the pod manager. Kubelet relies on the pod</span><span class="token comment">// manager as the source of truth for the desired state. If a pod does</span><span class="token comment">// not exist in the pod manager, it means that it has been deleted in</span><span class="token comment">// the apiserver and no action (other than cleanup) is required.</span><span class="token comment">// 将待创建的Pod加入Pod管理器中</span>kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">AddPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token keyword">if</span> kubepod<span class="token punctuation">.</span><span class="token function">IsMirrorPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span><span class="token function">handleMirrorPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果该Pod没有被terminate</span><span class="token keyword">if</span> <span class="token operator">!</span>kl<span class="token punctuation">.</span><span class="token function">podIsTerminated</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Only go through the admission process if the pod is not</span><span class="token comment">// terminated.</span><span class="token comment">// We failed pods that we rejected, so activePods include all admitted</span><span class="token comment">// pods that are alive.</span><span class="token comment">// 从existingPods中筛选出处于active状态的Pods</span>activePods <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">filterOutTerminatedPods</span><span class="token punctuation">(</span>existingPods<span class="token punctuation">)</span><span class="token comment">// Check if we can admit the pod; if not, reject it.</span><span class="token comment">// 验证该Pod是否被允许在该节点允许，如果不可以则拒绝创建</span><span class="token keyword">if</span> ok<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> message <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">canAdmitPod</span><span class="token punctuation">(</span>activePods<span class="token punctuation">,</span> pod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span><span class="token function">rejectPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>mirrorPod<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">GetMirrorPodByPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token comment">// 把该Pod交给dispatchWork来创建</span>kl<span class="token punctuation">.</span><span class="token function">dispatchWork</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> kubetypes<span class="token punctuation">.</span>SyncPodCreate<span class="token punctuation">,</span> mirrorPod<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token comment">// Pod创建完毕后，加入probeManager进行健康检查</span>kl<span class="token punctuation">.</span>probeManager<span class="token punctuation">.</span><span class="token function">AddPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码流程还是相对明确的。可以看到，<code>HandlePodAdditions</code>的主要工作为:</p><p>​    1&gt; 按照创建时间给待创建的Pods进行排序。然后对其中<strong>每个Pod</strong>进行下述处理；</p><p>​    2&gt; 获取当前Pod管理器中已存在的所有Pods（existingPods）；</p><p>​    3&gt; 将该Pod添加到Pod管理器中；</p><p>​    4&gt; 检验该Pod是否能在该节点上允许，如果不允许则直接拒绝；</p><p>​    5&gt; 将该Pod交付给<code>dispathWork</code>来创建；</p><p>​    6&gt; 当该Pod创建完毕后，将其添加到probeManager中，进行健康检查。</p><p>也就是说，创建Pod的，实际上是<code>dispathWork</code>方法，且传入参数<code>kubetypes.SyncPodCreate</code>指明对该Pod的操作为创建。</p><h4 id="dispatchWork"><a href="#dispatchWork" class="headerlink" title="dispatchWork"></a>dispatchWork</h4><p>我们进入该方法看下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">dispatchWork</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> syncType kubetypes<span class="token punctuation">.</span>SyncPodType<span class="token punctuation">,</span> mirrorPod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> start time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span><span class="token function">podIsTerminated</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> pod<span class="token punctuation">.</span>DeletionTimestamp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// If the pod is in a terminated state, there is no pod worker to</span><span class="token comment">// handle the work item. Check if the DeletionTimestamp has been</span><span class="token comment">// set, and force a status update to trigger a pod deletion request</span><span class="token comment">// to the apiserver.</span>kl<span class="token punctuation">.</span>statusManager<span class="token punctuation">.</span><span class="token function">TerminatePod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// Run the sync in an async worker.</span>kl<span class="token punctuation">.</span>podWorkers<span class="token punctuation">.</span><span class="token function">UpdatePod</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>UpdatePodOptions<span class="token punctuation">&#123;</span>Pod<span class="token punctuation">:</span>        pod<span class="token punctuation">,</span>MirrorPod<span class="token punctuation">:</span>  mirrorPod<span class="token punctuation">,</span>UpdateType<span class="token punctuation">:</span> syncType<span class="token punctuation">,</span>OnCompleteFunc<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>metrics<span class="token punctuation">.</span>PodWorkerLatency<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>syncType<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInMicroseconds</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Note the number of containers for new pods.</span><span class="token keyword">if</span> syncType <span class="token operator">==</span> kubetypes<span class="token punctuation">.</span>SyncPodCreate <span class="token punctuation">&#123;</span>metrics<span class="token punctuation">.</span>ContainersPerPodCount<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Containers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，该方法主要做三个工作：</p><p>​    1&gt; 如果Pod是终结态（”Failed” or “Succeeded”），则对status进行更新，触发对Pod的删除；</p><p>​    2&gt; 封装一个<code>UpdatePodOptions</code>来交给<code>UpdatePod</code>处理，其中字段<code>UpdateType</code>就是方法的<code>syncType</code>参数，在这里就是<code>kubetypes.SyncPodCreate</code>；</p><p>​    3&gt; 如果是创建操作，当然这里就是创建操作，会记录下新的Pod中的container数量。</p><p>也即，核心操作是<code>UpdatePod</code>方法，该文件位于<code>pkg/kubelet/pod_workers.go</code>。</p><h4 id="UpdatePod"><a href="#UpdatePod" class="headerlink" title="UpdatePod"></a>UpdatePod</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>podWorkers<span class="token punctuation">)</span> <span class="token function">UpdatePod</span><span class="token punctuation">(</span>options <span class="token operator">*</span>UpdatePodOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pod <span class="token operator">:=</span> options<span class="token punctuation">.</span>Poduid <span class="token operator">:=</span> pod<span class="token punctuation">.</span>UID<span class="token keyword">var</span> podUpdates <span class="token keyword">chan</span> UpdatePodOptions<span class="token keyword">var</span> exists <span class="token builtin">bool</span>p<span class="token punctuation">.</span>podLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> p<span class="token punctuation">.</span>podLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 如果该pod在podUpdates数组里面找不到，那么就创建channel，并启动异步线程，调用managePodLoop</span><span class="token keyword">if</span> podUpdates<span class="token punctuation">,</span> exists <span class="token operator">=</span> p<span class="token punctuation">.</span>podUpdates<span class="token punctuation">[</span>uid<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>exists <span class="token punctuation">&#123;</span><span class="token comment">// We need to have a buffer here, because checkForUpdates() method that</span><span class="token comment">// puts an update into channel is called from the same goroutine where</span><span class="token comment">// the channel is consumed. However, it is guaranteed that in such case</span><span class="token comment">// the channel is empty, so buffer of size 1 is enough.</span>podUpdates <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> UpdatePodOptions<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>podUpdates<span class="token punctuation">[</span>uid<span class="token punctuation">]</span> <span class="token operator">=</span> podUpdates<span class="token comment">// Creating a new pod worker either means this is a new pod, or that the</span><span class="token comment">// kubelet just restarted. In either case the kubelet is willing to believe</span><span class="token comment">// the status of the pod for the first pod worker sync. See corresponding</span><span class="token comment">// comment in syncPod.</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> runtime<span class="token punctuation">.</span><span class="token function">HandleCrash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">managePodLoop</span><span class="token punctuation">(</span>podUpdates<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>isWorking<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>isWorking<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>podUpdates <span class="token operator">&lt;-</span> <span class="token operator">*</span>options<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// if a request to kill a pod is pending, we do not let anything overwrite that request.</span>update<span class="token punctuation">,</span> found <span class="token operator">:=</span> p<span class="token punctuation">.</span>lastUndeliveredWorkUpdate<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token operator">||</span> update<span class="token punctuation">.</span>UpdateType <span class="token operator">!=</span> kubetypes<span class="token punctuation">.</span>SyncPodKill <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>lastUndeliveredWorkUpdate<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>options<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，该方法会在<code>p.podUpdates</code>数组里找当前Pod，如果没找到，就说明该Pod是要新创建的，或者Kubelet刚刚重启。不管是那种情况，方法都会创建一个新的channel，这个channel元素个数为1，即只有一个<code>UpdatePodOptions</code>。完成后，将该channel加入到<code>p.podUpdates</code>中。接着，开始调用<code>managePodLoop</code>。</p><h4 id="managePodLoop"><a href="#managePodLoop" class="headerlink" title="managePodLoop"></a>managePodLoop</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>podWorkers<span class="token punctuation">)</span> <span class="token function">managePodLoop</span><span class="token punctuation">(</span>podUpdates <span class="token operator">&lt;-</span><span class="token keyword">chan</span> UpdatePodOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> lastSyncTime time<span class="token punctuation">.</span>Time<span class="token comment">// 遍历channel</span><span class="token keyword">for</span> update <span class="token operator">:=</span> <span class="token keyword">range</span> podUpdates <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>podUID <span class="token operator">:=</span> update<span class="token punctuation">.</span>Pod<span class="token punctuation">.</span>UID<span class="token comment">// This is a blocking call that would return only if the cache</span><span class="token comment">// has an entry for the pod that is newer than minRuntimeCache</span><span class="token comment">// Time. This ensures the worker doesn't start syncing until</span><span class="token comment">// after the cache is at least newer than the finished time of</span><span class="token comment">// the previous sync.</span><span class="token comment">// 直到cache里面有新数据之前这段代码会阻塞，这保证worker在cache里面有新的数据之前不会提前开始</span>status<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>podCache<span class="token punctuation">.</span><span class="token function">GetNewerThan</span><span class="token punctuation">(</span>podUID<span class="token punctuation">,</span> lastSyncTime<span class="token punctuation">)</span><span class="token comment">//syncPodFn会在kubelet初始化的时候设置，调用的是kubelet的syncPod方法</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// This is the legacy event thrown by manage pod loop</span><span class="token comment">// all other events are now dispatched from syncPodFn</span>p<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedSync<span class="token punctuation">,</span> <span class="token string">"error determining status: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span>err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">syncPodFn</span><span class="token punctuation">(</span>syncPodOptions<span class="token punctuation">&#123;</span>mirrorPod<span class="token punctuation">:</span>      update<span class="token punctuation">.</span>MirrorPod<span class="token punctuation">,</span>pod<span class="token punctuation">:</span>            update<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span>podStatus<span class="token punctuation">:</span>      status<span class="token punctuation">,</span>killPodOptions<span class="token punctuation">:</span> update<span class="token punctuation">.</span>KillPodOptions<span class="token punctuation">,</span>updateType<span class="token punctuation">:</span>     update<span class="token punctuation">.</span>UpdateType<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>lastSyncTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// notify the call-back function if the operation succeeded or not</span><span class="token keyword">if</span> update<span class="token punctuation">.</span>OnCompleteFunc <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>update<span class="token punctuation">.</span><span class="token function">OnCompleteFunc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// IMPORTANT: we do not log errors here, the syncPodFn is responsible for logging errors</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Error syncing pod %s (%q), skipping: %v"</span><span class="token punctuation">,</span> update<span class="token punctuation">.</span>Pod<span class="token punctuation">.</span>UID<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">.</span><span class="token function">wrapUp</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>Pod<span class="token punctuation">.</span>UID<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法会遍历传入的channel中的数据，不过这里由于刚刚传入channel元素个数只有1，因此相当于取出其中的<code>UpdatePodOptions</code>，命名为<code>update</code>。然后，会根据<code>update</code>中的字段构造一个新的结构体<code>syncPodOptions</code>，并将其传给<code>syncPodFn</code>进行处理。</p><p><code>synvPodFn</code>是在Kubelet初始化时设置的。在初始化时，Kubelet会在执行<code>NewMainKubelet</code>时调用<code>newPodWorkers</code>方法设置<code>syncPodFn</code>为Kublet的<code>syncPod</code>方法，如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewMainKubelet</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>klet <span class="token operator">:=</span> <span class="token operator">&amp;</span>Kubelet<span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">...</span>klet<span class="token punctuation">.</span>podWorkers <span class="token operator">=</span> <span class="token function">newPodWorkers</span><span class="token punctuation">(</span>klet<span class="token punctuation">.</span>syncPod<span class="token punctuation">,</span> kubeDeps<span class="token punctuation">.</span>Recorder<span class="token punctuation">,</span> klet<span class="token punctuation">.</span>workQueue<span class="token punctuation">,</span> klet<span class="token punctuation">.</span>resyncInterval<span class="token punctuation">,</span> backOffPeriod<span class="token punctuation">,</span> klet<span class="token punctuation">.</span>podCache<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也即，要创建Pod，就要进入方法<code>syncPod</code>，该方法位于<code>pkg/kubelet/kubelet.go</code>中。</p><h4 id="syncPod"><a href="#syncPod" class="headerlink" title="syncPod"></a>syncPod</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">syncPod</span><span class="token punctuation">(</span>o syncPodOptions<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token comment">// pull out the required options</span>pod <span class="token operator">:=</span> o<span class="token punctuation">.</span>podmirrorPod <span class="token operator">:=</span> o<span class="token punctuation">.</span>mirrorPodpodStatus <span class="token operator">:=</span> o<span class="token punctuation">.</span>podStatusupdateType <span class="token operator">:=</span> o<span class="token punctuation">.</span>updateType<span class="token comment">// if we want to kill a pod, do it now!</span><span class="token keyword">if</span> updateType <span class="token operator">==</span> kubetypes<span class="token punctuation">.</span>SyncPodKill <span class="token punctuation">&#123;</span>killPodOptions <span class="token operator">:=</span> o<span class="token punctuation">.</span>killPodOptions<span class="token keyword">if</span> killPodOptions <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> killPodOptions<span class="token punctuation">.</span>PodStatusFunc <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"kill pod options are required if update type is kill"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>apiPodStatus <span class="token operator">:=</span> killPodOptions<span class="token punctuation">.</span><span class="token function">PodStatusFunc</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> podStatus<span class="token punctuation">)</span>kl<span class="token punctuation">.</span>statusManager<span class="token punctuation">.</span><span class="token function">SetPodStatus</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> apiPodStatus<span class="token punctuation">)</span><span class="token comment">// we kill the pod with the specified grace period since this is a termination</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">killPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> killPodOptions<span class="token punctuation">.</span>PodTerminationGracePeriodSecondsOverride<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToKillPod<span class="token punctuation">,</span> <span class="token string">"error killing pod: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token comment">// there was an error killing the pod, so we return that error directly</span>utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token comment">// Latency measurements for the main workflow are relative to the</span><span class="token comment">// first time the pod was seen by the API server.</span><span class="token keyword">var</span> firstSeenTime time<span class="token punctuation">.</span>Time<span class="token keyword">if</span> firstSeenTimeStr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> pod<span class="token punctuation">.</span>Annotations<span class="token punctuation">[</span>kubetypes<span class="token punctuation">.</span>ConfigFirstSeenAnnotationKey<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>firstSeenTime <span class="token operator">=</span> kubetypes<span class="token punctuation">.</span><span class="token function">ConvertToTimestamp</span><span class="token punctuation">(</span>firstSeenTimeStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Record pod worker start latency if being created</span><span class="token comment">// TODO: make pod workers record their own latencies</span><span class="token keyword">if</span> updateType <span class="token operator">==</span> kubetypes<span class="token punctuation">.</span>SyncPodCreate <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span>firstSeenTime<span class="token punctuation">.</span><span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// This is the first time we are syncing the pod. Record the latency</span><span class="token comment">// since kubelet first saw the pod if firstSeenTime is set.</span>metrics<span class="token punctuation">.</span>PodWorkerStartLatency<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInMicroseconds</span><span class="token punctuation">(</span>firstSeenTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"First seen time not recorded for pod %q"</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>UID<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Generate final API pod status with pod and status manager status</span>apiPodStatus <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">generateAPIPodStatus</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> podStatus<span class="token punctuation">)</span><span class="token comment">// The pod IP may be changed in generateAPIPodStatus if the pod is using host network. (See #24576)</span><span class="token comment">// TODO(random-liu): After writing pod spec into container labels, check whether pod is using host network, and</span><span class="token comment">// set pod IP to hostIP directly in runtime.GetPodStatus</span>podStatus<span class="token punctuation">.</span>IP <span class="token operator">=</span> apiPodStatus<span class="token punctuation">.</span>PodIP<span class="token comment">// Record the time it takes for the pod to become running.</span>existingStatus<span class="token punctuation">,</span> ok <span class="token operator">:=</span> kl<span class="token punctuation">.</span>statusManager<span class="token punctuation">.</span><span class="token function">GetPodStatus</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token operator">||</span> existingStatus<span class="token punctuation">.</span>Phase <span class="token operator">==</span> v1<span class="token punctuation">.</span>PodPending <span class="token operator">&amp;&amp;</span> apiPodStatus<span class="token punctuation">.</span>Phase <span class="token operator">==</span> v1<span class="token punctuation">.</span>PodRunning <span class="token operator">&amp;&amp;</span><span class="token operator">!</span>firstSeenTime<span class="token punctuation">.</span><span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>metrics<span class="token punctuation">.</span>PodStartLatency<span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInMicroseconds</span><span class="token punctuation">(</span>firstSeenTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 校验该Pod能否运行</span>runnable <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">canRunPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token comment">// 如果不能运行，那么回写container的等待原因</span><span class="token keyword">if</span> <span class="token operator">!</span>runnable<span class="token punctuation">.</span>Admit <span class="token punctuation">&#123;</span><span class="token comment">// Pod is not runnable; update the Pod and Container statuses to why.</span>apiPodStatus<span class="token punctuation">.</span>Reason <span class="token operator">=</span> runnable<span class="token punctuation">.</span>ReasonapiPodStatus<span class="token punctuation">.</span>Message <span class="token operator">=</span> runnable<span class="token punctuation">.</span>Message<span class="token comment">// Waiting containers are not creating.</span><span class="token keyword">const</span> waitingReason <span class="token operator">=</span> <span class="token string">"Blocked"</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cs <span class="token operator">:=</span> <span class="token keyword">range</span> apiPodStatus<span class="token punctuation">.</span>InitContainerStatuses <span class="token punctuation">&#123;</span><span class="token keyword">if</span> cs<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>cs<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting<span class="token punctuation">.</span>Reason <span class="token operator">=</span> waitingReason<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cs <span class="token operator">:=</span> <span class="token keyword">range</span> apiPodStatus<span class="token punctuation">.</span>ContainerStatuses <span class="token punctuation">&#123;</span><span class="token keyword">if</span> cs<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>cs<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Waiting<span class="token punctuation">.</span>Reason <span class="token operator">=</span> waitingReason<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Update status in the status manager</span><span class="token comment">// 更新状态管理器中的状态</span>kl<span class="token punctuation">.</span>statusManager<span class="token punctuation">.</span><span class="token function">SetPodStatus</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> apiPodStatus<span class="token punctuation">)</span><span class="token comment">// Kill pod if it should not be running</span><span class="token comment">// 如果校验没通过或pod已被删除或pod跑失败了，那么kill掉pod</span><span class="token keyword">if</span> <span class="token operator">!</span>runnable<span class="token punctuation">.</span>Admit <span class="token operator">||</span> pod<span class="token punctuation">.</span>DeletionTimestamp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> apiPodStatus<span class="token punctuation">.</span>Phase <span class="token operator">==</span> v1<span class="token punctuation">.</span>PodFailed <span class="token punctuation">&#123;</span><span class="token keyword">var</span> syncErr <span class="token builtin">error</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">killPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToKillPod<span class="token punctuation">,</span> <span class="token string">"error killing pod: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>syncErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error killing pod: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>syncErr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span>runnable<span class="token punctuation">.</span>Admit <span class="token punctuation">&#123;</span><span class="token comment">// There was no error killing the pod, but the pod cannot be run.</span><span class="token comment">// Return an error to signal that the sync loop should back off.</span>syncErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"pod cannot be run: %s"</span><span class="token punctuation">,</span> runnable<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> syncErr<span class="token punctuation">&#125;</span><span class="token comment">// If the network plugin is not ready, only start the pod if it uses the host network</span><span class="token comment">//校验网络插件是否已准备好</span><span class="token keyword">if</span> rs <span class="token operator">:=</span> kl<span class="token punctuation">.</span>runtimeState<span class="token punctuation">.</span><span class="token function">networkErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>kubecontainer<span class="token punctuation">.</span><span class="token function">IsHostNetworkPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>NetworkNotReady<span class="token punctuation">,</span> <span class="token string">"network is not ready: %v"</span><span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"network is not ready: %v"</span><span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Create Cgroups for the pod and apply resource parameters</span><span class="token comment">// to them if cgroups-per-qos flag is enabled.</span><span class="token comment">// 为该Pod创建containerManager</span>pcm <span class="token operator">:=</span> kl<span class="token punctuation">.</span>containerManager<span class="token punctuation">.</span><span class="token function">NewPodContainerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// If pod has already been terminated then we need not create</span><span class="token comment">// or update the pod's cgroup</span><span class="token comment">// 如果该Pod不是终结态</span><span class="token keyword">if</span> <span class="token operator">!</span>kl<span class="token punctuation">.</span><span class="token function">podIsTerminated</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// When the kubelet is restarted with the cgroups-per-qos</span><span class="token comment">// flag enabled, all the pod's running containers</span><span class="token comment">// should be killed intermittently and brought back up</span><span class="token comment">// under the qos cgroup hierarchy.</span><span class="token comment">// Check if this is the pod's first sync</span>firstSync <span class="token operator">:=</span> <span class="token boolean">true</span><span class="token comment">// 校验该pod是否首次创建</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> containerStatus <span class="token operator">:=</span> <span class="token keyword">range</span> apiPodStatus<span class="token punctuation">.</span>ContainerStatuses <span class="token punctuation">&#123;</span><span class="token keyword">if</span> containerStatus<span class="token punctuation">.</span>State<span class="token punctuation">.</span>Running <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>firstSync <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Don't kill containers in pod if pod's cgroups already</span><span class="token comment">// exists or the pod is running for the first time</span>podKilled <span class="token operator">:=</span> <span class="token boolean">false</span><span class="token comment">// 如果该pod 的cgroups(container groups)不存在，并且不是首次启动，那么kill掉</span><span class="token keyword">if</span> <span class="token operator">!</span>pcm<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>firstSync <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">killPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>podKilled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Create and Update pod's Cgroups</span><span class="token comment">// Don't create cgroups for run once pod if it was killed above</span><span class="token comment">// The current policy is not to restart the run once pods when</span><span class="token comment">// the kubelet is restarted with the new flag as run once pods are</span><span class="token comment">// expected to run only once and if the kubelet is restarted then</span><span class="token comment">// they are not expected to run again.</span><span class="token comment">// We don't create and apply updates to cgroup if its a run once pod and was killed above</span><span class="token comment">// 如果该pod在上面没有被kill掉，或重启策略不是永不重启</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token punctuation">(</span>podKilled <span class="token operator">&amp;&amp;</span> pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>RestartPolicy <span class="token operator">==</span> v1<span class="token punctuation">.</span>RestartPolicyNever<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果该pod的cgroups不存在，那么就创建cgroups</span><span class="token keyword">if</span> <span class="token operator">!</span>pcm<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span>containerManager<span class="token punctuation">.</span><span class="token function">UpdateQOSCgroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Failed to update QoS cgroups while syncing pod: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> pcm<span class="token punctuation">.</span><span class="token function">EnsureExists</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToCreatePodContainer<span class="token punctuation">,</span> <span class="token string">"unable to ensure pod container exists: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to ensure that the pod: %v cgroups exist and are correctly applied: %v"</span><span class="token punctuation">,</span> pod<span class="token punctuation">.</span>UID<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//为静态pod 创建镜像</span><span class="token comment">// Create Mirror Pod for Static Pod if it doesn't already exist</span><span class="token keyword">if</span> kubepod<span class="token punctuation">.</span><span class="token function">IsStaticPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>podFullName <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span><span class="token function">GetPodFullName</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>deleted <span class="token operator">:=</span> <span class="token boolean">false</span><span class="token keyword">if</span> mirrorPod <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> mirrorPod<span class="token punctuation">.</span>DeletionTimestamp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token operator">!</span>kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">IsMirrorPodOf</span><span class="token punctuation">(</span>mirrorPod<span class="token punctuation">,</span> pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// The mirror pod is semantically different from the static pod. Remove</span><span class="token comment">// it. The mirror pod will get recreated later.</span>glog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Deleting mirror pod %q because it is outdated"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>mirrorPod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">DeleteMirrorPod</span><span class="token punctuation">(</span>podFullName<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Failed deleting mirror pod %q: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>mirrorPod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>deleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> mirrorPod <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> deleted <span class="token punctuation">&#123;</span>node<span class="token punctuation">,</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">GetNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>DeletionTimestamp <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"No need to create a mirror pod, since node %q has been removed from the cluster"</span><span class="token punctuation">,</span> kl<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Creating a mirror pod for static pod %q"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">CreateMirrorPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Failed creating a mirror pod for %q: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Make data directories for the pod</span><span class="token comment">// 创建pod的文件目录</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">makePodDataDirs</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToMakePodDataDirectories<span class="token punctuation">,</span> <span class="token string">"error making pod data directories: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to make pod data directories for pod %q: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">// Volume manager will not mount volumes for terminated pods</span><span class="token comment">// 如果该pod没有被终止，那么需要等待attach/mount volumes</span><span class="token keyword">if</span> <span class="token operator">!</span>kl<span class="token punctuation">.</span><span class="token function">podIsTerminated</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Wait for volumes to attach/mount</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span>volumeManager<span class="token punctuation">.</span><span class="token function">WaitForAttachAndMount</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedMountVolume<span class="token punctuation">,</span> <span class="token string">"Unable to mount volumes for pod %q: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to mount volumes for pod %q: %v; skipping pod"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Fetch the pull secrets for the pod</span><span class="token comment">// 如果有 image secrets，去 apiserver 获取对应的 secrets 数据</span>pullSecrets <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">getPullSecretsForPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token comment">// Call the container runtime's SyncPod callback</span><span class="token comment">// 真正的容器创建逻辑，调用SyncPod来真正的创建Pod</span>result <span class="token operator">:=</span> kl<span class="token punctuation">.</span>containerRuntime<span class="token punctuation">.</span><span class="token function">SyncPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> apiPodStatus<span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> pullSecrets<span class="token punctuation">,</span> kl<span class="token punctuation">.</span>backOff<span class="token punctuation">)</span>kl<span class="token punctuation">.</span>reasonCache<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// Do not record an event here, as we keep all event logging for sync pod failures</span><span class="token comment">// local to container runtime so we get better errors</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法比较复杂，主要是完成创建Pod前的<code>准备工作</code>，主要准备工作如下：</p><p>​    1&gt; 校验该Pod能否运行，如果不能运行，那么回写container的等待原因，然后更新<code>statusManager</code>的状态信息；</p><p>​    2&gt; 如果校验没通过或Pod已被删除或Pod跑失败了，那么kill掉Pod，返回；</p><p>​    3&gt; 校验网络插件是否已经准备好，如果没有，直接返回；</p><p>​    4&gt; 如果该Pod的<code>cgroups</code>（container groups）不存在，且不是首次运行，则kill掉；</p><p>​    5&gt; 如果该Pod的cgroups不存在，且在上面没有被kill掉（首次运行），或重启策略不是永不重启，则创建cgroups；</p><p>​    6&gt; 为静态Pod创建镜像；</p><p>​    7&gt; 创建Pod的基础文件目录，等待<code>volume attach/mount</code>；</p><p>​    8&gt; 拉取这个Pod的Secret；</p><p>​    9&gt; 调用<code>containerRuntime.SyncPod</code>来真正创建Pod。</p><p>也就是说，上面这个<code>syncPod</code>只是完成了一些创建前的准备工作，真正执行创建Pod的，是<code>containerRuntime.SyncPod</code>方法。位于：<code>pkg/kubelet/kuberuntime/kuberuntime_manager.go</code></p><h4 id="SyncPod"><a href="#SyncPod" class="headerlink" title="SyncPod"></a>SyncPod</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>kubeGenericRuntimeManager<span class="token punctuation">)</span> <span class="token function">SyncPod</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> <span class="token boolean">_</span> v1<span class="token punctuation">.</span>PodStatus<span class="token punctuation">,</span> podStatus <span class="token operator">*</span>kubecontainer<span class="token punctuation">.</span>PodStatus<span class="token punctuation">,</span> pullSecrets <span class="token punctuation">[</span><span class="token punctuation">]</span>v1<span class="token punctuation">.</span>Secret<span class="token punctuation">,</span> backOff <span class="token operator">*</span>flowcontrol<span class="token punctuation">.</span>Backoff<span class="token punctuation">)</span> <span class="token punctuation">(</span>result kubecontainer<span class="token punctuation">.</span>PodSyncResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Step 1: Compute sandbox and container changes.</span><span class="token comment">// 计算一下有哪些pod中container有没有变化，有哪些container需要创建,有哪些container需要kill掉</span>podContainerChanges <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">computePodActions</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> podStatus<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"computePodActions got %+v for pod %q"</span><span class="token punctuation">,</span> podContainerChanges<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> podContainerChanges<span class="token punctuation">.</span>CreateSandbox <span class="token punctuation">&#123;</span>ref<span class="token punctuation">,</span> err <span class="token operator">:=</span> ref<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span>legacyscheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">,</span> pod<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Couldn't make a ref to pod %q: '%v'"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> podContainerChanges<span class="token punctuation">.</span>SandboxID <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeNormal<span class="token punctuation">,</span> events<span class="token punctuation">.</span>SandboxChanged<span class="token punctuation">,</span> <span class="token string">"Pod sandbox changed, it will be killed and re-created."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncPod received new pod %q, will create a sandbox for it"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Step 2: Kill the pod if the sandbox has changed.</span><span class="token comment">// kill掉 sandbox 已经改变的 pod</span><span class="token keyword">if</span> podContainerChanges<span class="token punctuation">.</span>KillPod <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span>podContainerChanges<span class="token punctuation">.</span>CreateSandbox <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Stopping PodSandbox for %q because all other containers are dead."</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Stopping PodSandbox for %q, will start new one"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>killResult <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">killPodWithSyncResult</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> kubecontainer<span class="token punctuation">.</span><span class="token function">ConvertPodStatusToRunningPod</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>runtimeName<span class="token punctuation">,</span> podStatus<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">AddPodSyncResult</span><span class="token punctuation">(</span>killResult<span class="token punctuation">)</span><span class="token keyword">if</span> killResult<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"killPodWithSyncResult failed: %v"</span><span class="token punctuation">,</span> killResult<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> podContainerChanges<span class="token punctuation">.</span>CreateSandbox <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span><span class="token function">purgeInitContainers</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> podStatus<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// Step 3: kill any running containers in this pod which are not to keep.</span><span class="token comment">// kill掉ContainersToKill列表中的container</span><span class="token keyword">for</span> containerID<span class="token punctuation">,</span> containerInfo <span class="token operator">:=</span> <span class="token keyword">range</span> podContainerChanges<span class="token punctuation">.</span>ContainersToKill <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Killing unwanted container %q(id=%q) for pod %q"</span><span class="token punctuation">,</span> containerInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> containerID<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span>killContainerResult <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span><span class="token function">NewSyncResult</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>KillContainer<span class="token punctuation">,</span> containerInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">AddSyncResult</span><span class="token punctuation">(</span>killContainerResult<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">killContainer</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> containerID<span class="token punctuation">,</span> containerInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> containerInfo<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>killContainerResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>ErrKillContainer<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"killContainer %q(id=%q) for pod %q failed: %v"</span><span class="token punctuation">,</span> containerInfo<span class="token punctuation">.</span>name<span class="token punctuation">,</span> containerID<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Keep terminated init containers fairly aggressively controlled</span><span class="token comment">// This is an optmization because container removals are typically handled</span><span class="token comment">// by container garbage collector.</span><span class="token comment">// 清理同名的 Init Container</span>m<span class="token punctuation">.</span><span class="token function">pruneInitContainersBeforeStart</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> podStatus<span class="token punctuation">)</span><span class="token comment">// We pass the value of the podIP down to generatePodSandboxConfig and</span><span class="token comment">// generateContainerConfig, which in turn passes it to various other</span><span class="token comment">// functions, in order to facilitate functionality that requires this</span><span class="token comment">// value (hosts file and downward API) and avoid races determining</span><span class="token comment">// the pod IP in cases where a container requires restart but the</span><span class="token comment">// podIP isn't in the status manager yet.</span><span class="token comment">//</span><span class="token comment">// We default to the IP in the passed-in pod status, and overwrite it if the</span><span class="token comment">// sandbox needs to be (re)started.</span>podIP <span class="token operator">:=</span> <span class="token string">""</span><span class="token keyword">if</span> podStatus <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>podIP <span class="token operator">=</span> podStatus<span class="token punctuation">.</span>IP<span class="token punctuation">&#125;</span><span class="token comment">// Step 4: Create a sandbox for the pod if necessary.</span><span class="token comment">// 为pod创建sandbox</span>podSandboxID <span class="token operator">:=</span> podContainerChanges<span class="token punctuation">.</span>SandboxID<span class="token keyword">if</span> podContainerChanges<span class="token punctuation">.</span>CreateSandbox <span class="token punctuation">&#123;</span><span class="token keyword">var</span> msg <span class="token builtin">string</span><span class="token keyword">var</span> err <span class="token builtin">error</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Creating sandbox for pod %q"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span>createSandboxResult <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span><span class="token function">NewSyncResult</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>CreatePodSandbox<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">AddSyncResult</span><span class="token punctuation">(</span>createSandboxResult<span class="token punctuation">)</span>podSandboxID<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">createPodSandbox</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> podContainerChanges<span class="token punctuation">.</span>Attempt<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>createSandboxResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>ErrCreatePodSandbox<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"createPodSandbox for pod %q failed: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>ref<span class="token punctuation">,</span> err <span class="token operator">:=</span> ref<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span>legacyscheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">,</span> pod<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Couldn't make a ref to pod %q: '%v'"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>m<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedCreatePodSandBox<span class="token punctuation">,</span> <span class="token string">"Failed create pod sandbox."</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Created PodSandbox %q for pod %q"</span><span class="token punctuation">,</span> podSandboxID<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span>podSandboxStatus<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span>runtimeService<span class="token punctuation">.</span><span class="token function">PodSandboxStatus</span><span class="token punctuation">(</span>podSandboxID<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">,</span> err <span class="token operator">:=</span> ref<span class="token punctuation">.</span><span class="token function">GetReference</span><span class="token punctuation">(</span>legacyscheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">,</span> pod<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Couldn't make a ref to pod %q: '%v'"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>m<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedStatusPodSandBox<span class="token punctuation">,</span> <span class="token string">"Unable to get pod sandbox status: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Failed to get pod sandbox status: %v; Skipping pod %q"</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// If we ever allow updating a pod from non-host-network to</span><span class="token comment">// host-network, we may use a stale IP.</span><span class="token keyword">if</span> <span class="token operator">!</span>kubecontainer<span class="token punctuation">.</span><span class="token function">IsHostNetworkPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Overwrite the podIP passed in the pod status, since we just started the pod sandbox.</span>podIP <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">determinePodSandboxIP</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>Namespace<span class="token punctuation">,</span> pod<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> podSandboxStatus<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Determined the ip %q for pod %q after sandbox changed"</span><span class="token punctuation">,</span> podIP<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Get podSandboxConfig for containers to start.</span>configPodSandboxResult <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span><span class="token function">NewSyncResult</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>ConfigPodSandbox<span class="token punctuation">,</span> podSandboxID<span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">AddSyncResult</span><span class="token punctuation">(</span>configPodSandboxResult<span class="token punctuation">)</span><span class="token comment">//生成Sandbox的config配置，如pod的DNS、hostName、端口映射</span>podSandboxConfig<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">generatePodSandboxConfig</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> podContainerChanges<span class="token punctuation">.</span>Attempt<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>message <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"GeneratePodSandboxConfig for pod %q failed: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>configPodSandboxResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>ErrConfigPodSandbox<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// Step 5: start the init container.</span><span class="token comment">// 启动初始化容器</span><span class="token keyword">if</span> container <span class="token operator">:=</span> podContainerChanges<span class="token punctuation">.</span>NextInitContainerToStart<span class="token punctuation">;</span> container <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// Start the next init container.</span>startContainerResult <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span><span class="token function">NewSyncResult</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>StartContainer<span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">AddSyncResult</span><span class="token punctuation">(</span>startContainerResult<span class="token punctuation">)</span>isInBackOff<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">doBackOff</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> backOff<span class="token punctuation">)</span><span class="token keyword">if</span> isInBackOff <span class="token punctuation">&#123;</span>startContainerResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Backing Off restarting init container %+v in pod %v"</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Creating init container %+v in pod %v"</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 启动</span><span class="token keyword">if</span> msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">startContainer</span><span class="token punctuation">(</span>podSandboxID<span class="token punctuation">,</span> podSandboxConfig<span class="token punctuation">,</span> container<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> pullSecrets<span class="token punctuation">,</span> podIP<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>startContainerResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"init container start failed: %v: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// Successfully started the container; clear the entry in the failure</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Completed init container %q for pod %q"</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Step 6: start containers in podContainerChanges.ContainersToStart.</span><span class="token comment">// 启动容器列表</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> idx <span class="token operator">:=</span> <span class="token keyword">range</span> podContainerChanges<span class="token punctuation">.</span>ContainersToStart <span class="token punctuation">&#123;</span>container <span class="token operator">:=</span> <span class="token operator">&amp;</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Containers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>startContainerResult <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span><span class="token function">NewSyncResult</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>StartContainer<span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">AddSyncResult</span><span class="token punctuation">(</span>startContainerResult<span class="token punctuation">)</span>isInBackOff<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">doBackOff</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> backOff<span class="token punctuation">)</span><span class="token keyword">if</span> isInBackOff <span class="token punctuation">&#123;</span>startContainerResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Backing Off restarting container %+v in pod %v"</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Creating container %+v in pod %v"</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 启动</span><span class="token keyword">if</span> msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">startContainer</span><span class="token punctuation">(</span>podSandboxID<span class="token punctuation">,</span> podSandboxConfig<span class="token punctuation">,</span> container<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> pullSecrets<span class="token punctuation">,</span> podIP<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>startContainerResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token comment">// known errors that are logged in other places are logged at higher levels here to avoid</span><span class="token comment">// repetitive log spam</span><span class="token keyword">switch</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> err <span class="token operator">==</span> images<span class="token punctuation">.</span>ErrImagePullBackOff<span class="token punctuation">:</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"container start failed: %v: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"container start failed: %v: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法的主要工作如下：</p><p>​    1&gt; 首先会调用<code>computePodActions</code>计算一下有哪些Pod中的container有没有变化，有哪些container需要创建，有哪些container需要kill掉；</p><p>​    2&gt; kill掉<code>Sandbox</code>已经改变的Pod；</p><p>​    3&gt; 如果有container已改变，那么需要调用<code>killContainer</code>方法来kill掉<code>ContainersToKill</code>列表中的container；</p><p>​    4&gt; 调用<code>pruneInitContainersBeforeStart</code>方法清理同名的<code>Init Container</code>；</p><p>​    5&gt; 调用<code>createPodSandbox</code>，方法，创建需要被创建的<code>Sandbox</code>；</p><p>​    6&gt; 生成<code>Sandbox</code>的config配置，如Pod的DNS、hostName、端口映射等等；</p><p>​    7&gt; 启动<code>Init Container</code>；</p><p>​    8&gt; 遍历<code>ContainersToStart</code>，启动容器列表；</p><p>不管是<code>Init Container</code>还是普通的Container，启动它都需要调用<code>startContainer</code>来实现。该方法位于：<code>pkg/kubelet/kuberuntime/kuberuntime_container.go</code>中，进去看看：</p><h4 id="startContainer"><a href="#startContainer" class="headerlink" title="startContainer"></a>startContainer</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>kubeGenericRuntimeManager<span class="token punctuation">)</span> <span class="token function">startContainer</span><span class="token punctuation">(</span>podSandboxID <span class="token builtin">string</span><span class="token punctuation">,</span> podSandboxConfig <span class="token operator">*</span>runtimeapi<span class="token punctuation">.</span>PodSandboxConfig<span class="token punctuation">,</span> container <span class="token operator">*</span>v1<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> podStatus <span class="token operator">*</span>kubecontainer<span class="token punctuation">.</span>PodStatus<span class="token punctuation">,</span> pullSecrets <span class="token punctuation">[</span><span class="token punctuation">]</span>v1<span class="token punctuation">.</span>Secret<span class="token punctuation">,</span> podIP <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Step 1: pull the image.</span><span class="token comment">// 拉取镜像</span>imageRef<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span>imagePuller<span class="token punctuation">.</span><span class="token function">EnsureImageExists</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> pullSecrets<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span><span class="token function">recordContainerEvent</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToCreateContainer<span class="token punctuation">,</span> <span class="token string">"Error: %v"</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">ErrorDesc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span class="token comment">// Step 2: create the container.</span><span class="token comment">// 开始创建container</span>ref<span class="token punctuation">,</span> err <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span><span class="token function">GenerateContainerRef</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Can't make a ref to pod %q, container %v: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Generating ref for container %s: %#v"</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token comment">// For a new container, the RestartCount should be 0</span><span class="token comment">// 如果是个新的container，那么restartCount应该为0</span>restartCount <span class="token operator">:=</span> <span class="token number">0</span>containerStatus <span class="token operator">:=</span> podStatus<span class="token punctuation">.</span><span class="token function">FindContainerStatusByName</span><span class="token punctuation">(</span>container<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token keyword">if</span> containerStatus <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>restartCount <span class="token operator">=</span> containerStatus<span class="token punctuation">.</span>RestartCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">// 生成Container config</span>containerConfig<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">generateContainerConfig</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> restartCount<span class="token punctuation">,</span> podIP<span class="token punctuation">,</span> imageRef<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span><span class="token function">recordContainerEvent</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToCreateContainer<span class="token punctuation">,</span> <span class="token string">"Error: %v"</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">ErrorDesc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> grpc<span class="token punctuation">.</span><span class="token function">ErrorDesc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span> ErrCreateContainerConfig<span class="token punctuation">&#125;</span><span class="token comment">// 调用CRI接口创建Container</span>containerID<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span>runtimeService<span class="token punctuation">.</span><span class="token function">CreateContainer</span><span class="token punctuation">(</span>podSandboxID<span class="token punctuation">,</span> containerConfig<span class="token punctuation">,</span> podSandboxConfig<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span><span class="token function">recordContainerEvent</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> containerID<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToCreateContainer<span class="token punctuation">,</span> <span class="token string">"Error: %v"</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">ErrorDesc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> grpc<span class="token punctuation">.</span><span class="token function">ErrorDesc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span> ErrCreateContainer<span class="token punctuation">&#125;</span><span class="token comment">// 调用生命周期的钩子，预启动Pre Start Container</span>err <span class="token operator">=</span> m<span class="token punctuation">.</span>internalLifecycle<span class="token punctuation">.</span><span class="token function">PreStartContainer</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> containerID<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToStartContainer<span class="token punctuation">,</span> <span class="token string">"Internal PreStartContainer hook failed: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">"Internal PreStartContainer hook failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span>m<span class="token punctuation">.</span><span class="token function">recordContainerEvent</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> containerID<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeNormal<span class="token punctuation">,</span> events<span class="token punctuation">.</span>CreatedContainer<span class="token punctuation">,</span> <span class="token string">"Created container"</span><span class="token punctuation">)</span><span class="token keyword">if</span> ref <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span>containerRefManager<span class="token punctuation">.</span><span class="token function">SetRef</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>ContainerID<span class="token punctuation">&#123;</span>Type<span class="token punctuation">:</span> m<span class="token punctuation">.</span>runtimeName<span class="token punctuation">,</span>ID<span class="token punctuation">:</span>   containerID<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Step 3: start the container.</span><span class="token comment">// 调用CRI接口启动container</span>err <span class="token operator">=</span> m<span class="token punctuation">.</span>runtimeService<span class="token punctuation">.</span><span class="token function">StartContainer</span><span class="token punctuation">(</span>containerID<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span><span class="token function">recordContainerEvent</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> containerID<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToStartContainer<span class="token punctuation">,</span> <span class="token string">"Error: %v"</span><span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">ErrorDesc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> grpc<span class="token punctuation">.</span><span class="token function">ErrorDesc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span> kubecontainer<span class="token punctuation">.</span>ErrRunContainer<span class="token punctuation">&#125;</span>m<span class="token punctuation">.</span><span class="token function">recordContainerEvent</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> containerID<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeNormal<span class="token punctuation">,</span> events<span class="token punctuation">.</span>StartedContainer<span class="token punctuation">,</span> <span class="token string">"Started container"</span><span class="token punctuation">)</span><span class="token comment">// Symlink container logs to the legacy container log location for cluster logging</span><span class="token comment">// support.</span><span class="token comment">// TODO(random-liu): Remove this after cluster logging supports CRI container log path.</span>containerMeta <span class="token operator">:=</span> containerConfig<span class="token punctuation">.</span><span class="token function">GetMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sandboxMeta <span class="token operator">:=</span> podSandboxConfig<span class="token punctuation">.</span><span class="token function">GetMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>legacySymlink <span class="token operator">:=</span> <span class="token function">legacyLogSymlink</span><span class="token punctuation">(</span>containerID<span class="token punctuation">,</span> containerMeta<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> sandboxMeta<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>sandboxMeta<span class="token punctuation">.</span>Namespace<span class="token punctuation">)</span>containerLog <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>podSandboxConfig<span class="token punctuation">.</span>LogDirectory<span class="token punctuation">,</span> containerConfig<span class="token punctuation">.</span>LogPath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span>osInterface<span class="token punctuation">.</span><span class="token function">Symlink</span><span class="token punctuation">(</span>containerLog<span class="token punctuation">,</span> legacySymlink<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Failed to create legacy symbolic link %q to container %q log %q: %v"</span><span class="token punctuation">,</span>legacySymlink<span class="token punctuation">,</span> containerID<span class="token punctuation">,</span> containerLog<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Step 4: execute the post start hook.</span><span class="token comment">// 依然是调用生命周期中设置的钩子 post start</span><span class="token keyword">if</span> container<span class="token punctuation">.</span>Lifecycle <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span>Lifecycle<span class="token punctuation">.</span>PostStart <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kubeContainerID <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span>ContainerID<span class="token punctuation">&#123;</span>Type<span class="token punctuation">:</span> m<span class="token punctuation">.</span>runtimeName<span class="token punctuation">,</span>ID<span class="token punctuation">:</span>   containerID<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行预处理工作</span>msg<span class="token punctuation">,</span> handlerErr <span class="token operator">:=</span> m<span class="token punctuation">.</span>runner<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>kubeContainerID<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> container<span class="token punctuation">.</span>Lifecycle<span class="token punctuation">.</span>PostStart<span class="token punctuation">)</span><span class="token keyword">if</span> handlerErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">.</span><span class="token function">recordContainerEvent</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> kubeContainerID<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedPostStartHook<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token comment">// 如果预处理失败，那么需要kill掉Container</span><span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">killContainer</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> kubeContainerID<span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">"FailedPostStartHook"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Failed to kill container %q(id=%q) in pod %q: %v, %v"</span><span class="token punctuation">,</span>container<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> kubeContainerID<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> ErrPostStartHook<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> msg<span class="token punctuation">,</span> ErrPostStartHook<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法还是比较清晰的：</p><p>​    1&gt; 拉取container需要的镜像；</p><p>​    2&gt; 计算一下container重启次数，如果是首次创建，那么应该是0；</p><p>​    3&gt; 生成<code>container config</code>，用于创建container；</p><p>​    4&gt; 调用CRI接口<code>CreateContainer</code>来创建container；</p><p>​    5&gt; 在启动之前调用<code>PreStartContainer</code>做好预处理工作；</p><p>​    6&gt; 调用CRI接口<code>StartContainer</code>启动container；</p><p>​    7&gt; 调用声明周期中设置的钩子<code>post start</code>；</p><p>至此，一个<code>dispathWork</code>的Pod创建工作基本完成，当Pods内的每个Pod都用这种方式创建完成，Pods即创建成功。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>用一张图总结Pod(s)的创建流程。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/6653a4507c37c12c.png"></p><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a href="https://www.cnblogs.com/luozhiyun/p/13736569.html">https://www.cnblogs.com/luozhiyun/p/13736569.html</a></p><p>[2] <a href="https://kubernetes.io/docs/concepts/workloads/pods/">https://kubernetes.io/docs/concepts/workloads/pods/</a></p><p>[3] Kubelet源码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> k8s </tag>
            
            <tag> kubelet </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逃逸: CVE-2017-1002101</title>
      <link href="/tao-yi-cve-2017-1002101/"/>
      <url>/tao-yi-cve-2017-1002101/</url>
      
        <content type="html"><![CDATA[<p>CVE-2017-1002101漏洞能让Kubelet创建的Pod挂载到宿主机中不允许挂载的目录，从而造成了逃逸。这听上去很不可思议，因为完全可以在<code>PSP(Pod Security Policies)</code>中限制Pod对主机目录的挂载权限。是的没错，我们可以通过PSP限制Pod只能挂载特定的安全目录，对于其他目录都不允许挂载。但是，至少在k8s<code>v1.9.4</code>版本之前，这种逃逸攻击都是可行的。其核心，就是Linux的<code>软连接</code>和k8s的<code>volume subPath</code>。</p><span id="more"></span><p>软连接不用说，说一下<code>subPath</code>。没创建一个<code>volume</code>，它就会挂载到宿主机中指定的目录，将这个目录称为<code>hostPath</code>。但是，如果希望让不同的Pod或者同一个Pod下不同的容器挂载到该volume下的不同<code>子目录</code>，怎么实现？答案就是<code>subPath</code>。以同一个<code>LAMP Pod(Linux Apache Mysql PHP)</code>下的不同容器为例，我们可以让整个Pod挂载到指定volume下，但是让mysql的工作目录挂载到该volume的mysql子目录下，让html的资源目录挂载到该volume的html子目录中。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>lamp<span class="token punctuation">-</span>site<span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql      <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql      <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"rootpasswd"</span>      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/mysql        <span class="token key atrule">name</span><span class="token punctuation">:</span> site<span class="token punctuation">-</span>data        <span class="token key atrule">subPath</span><span class="token punctuation">:</span> mysql    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> php      <span class="token key atrule">image</span><span class="token punctuation">:</span> php<span class="token punctuation">:</span>7.0<span class="token punctuation">-</span>apache      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/www/html        <span class="token key atrule">name</span><span class="token punctuation">:</span> site<span class="token punctuation">-</span>data        <span class="token key atrule">subPath</span><span class="token punctuation">:</span> html    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> site<span class="token punctuation">-</span>data      <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>        <span class="token key atrule">claimName</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>lamp<span class="token punctuation">-</span>site<span class="token punctuation">-</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，一个Pod或是容器，具体挂载进宿主机下的哪个目录，是通过<code>hostPath</code>+<code>subPath</code>来决定的。当然，默认情况下<code>subPath</code>为空。</p><p>至于为什么<code>subPath</code>配合<code>软连接</code>可以让Pod挂载到权限之外的目录，就要从Kublet源码开始分析，深入了解一下创建Pod时，volume是如何创建和挂载的。</p><hr><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="Pod创建过程"><a href="#Pod创建过程" class="headerlink" title="Pod创建过程"></a>Pod创建过程</h4><p>这里使用的k8s版本为<code>v1.9.3</code>，git commit为<code>d2835416544</code>。比较老，因为这个漏洞比较早。</p><img src="https://i.bmp.ovh/imgs/2022/01/5089f514aabe5eeb.png"  /><p>可以看到，kubelet 的工作核心，就是一个控制循环，即：<code>SyncLoop</code>。驱动整个控制循环的事件有：pod更新事件、pod生命周期变化、kubelet本身设置的执行周期、定时清理事件等。在SyncLoop循环上还有很多Manager，例如probeManager 会定时去监控 pod 中容器的健康状况、statusManager 负责维护状态信息，并把 pod 状态更新到 apiserver、ontainerRefManager 容器引用的管理等等。不过这些Manage在这里先不管，只聚焦于Pod的创建。</p><p>整个Kubelet的启动，都记录在<code>kubernetes\pkg\kubelet\kubelet.go</code>文件中的<code>Run</code>方法中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Run starts the kubelet reacting to config updates</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>updates <span class="token operator">&lt;-</span><span class="token keyword">chan</span> kubetypes<span class="token punctuation">.</span>PodUpdate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注册 logServer</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>logServer <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>logServer <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/logs/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"/var/log/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>kubeClient <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"No api server defined - no node status update will be sent."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">initializeModules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>nodeRef<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>KubeletSetupFailed<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Start volume manager</span><span class="token keyword">go</span> kl<span class="token punctuation">.</span>volumeManager<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>sourcesReady<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>kubeClient <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// Start syncing node status immediately, this may set up things the runtime needs to run.</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>syncNodeStatus<span class="token punctuation">,</span> kl<span class="token punctuation">.</span>nodeStatusUpdateFrequency<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>syncNetworkStatus<span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>updateRuntimeUp<span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token comment">// Start loop to sync iptables util rules</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>makeIPTablesUtilChains <span class="token punctuation">&#123;</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>syncNetworkUtil<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Start a goroutine responsible for killing pods (that are not properly</span><span class="token comment">// handled by pod workers).</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>podKiller<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token comment">// Start gorouting responsible for checking limits in resolv.conf</span><span class="token keyword">if</span> kl<span class="token punctuation">.</span>dnsConfigurer<span class="token punctuation">.</span>ResolverConfig <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span><span class="token keyword">go</span> wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> kl<span class="token punctuation">.</span>dnsConfigurer<span class="token punctuation">.</span><span class="token function">CheckLimitsForResolvConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> wait<span class="token punctuation">.</span>NeverStop<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Start component sync loops.</span>kl<span class="token punctuation">.</span>statusManager<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>kl<span class="token punctuation">.</span>probeManager<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Start the pod lifecycle event generator.</span>    <span class="token comment">//启动 pleg 该模块主要用于周期性地向 container runtime 刷新当前所有容器的状态</span>kl<span class="token punctuation">.</span>pleg<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>kl<span class="token punctuation">.</span><span class="token function">syncLoop</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> kl<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Run</code>方法以<code>kl.syncLoop</code>方法结尾。实际上，它是通过最后调用<code>kl.syncLoop</code>来启动事件循环，循环的监听管道信息，而我们要的Pod创建代码，就在其中。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// in pkg/kubelet/kubelet.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">syncLoop</span><span class="token punctuation">(</span>updates <span class="token operator">&lt;-</span><span class="token keyword">chan</span> kubetypes<span class="token punctuation">.</span>PodUpdate<span class="token punctuation">,</span> handler SyncHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Starting kubelet main sync loop."</span><span class="token punctuation">)</span><span class="token comment">// The resyncTicker wakes up kubelet to checks if there are any pod workers</span><span class="token comment">// that need to be sync'd. A one-second period is sufficient because the</span><span class="token comment">// sync interval is defaulted to 10s.</span>syncTicker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> syncTicker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>housekeepingTicker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>housekeepingPeriod<span class="token punctuation">)</span><span class="token keyword">defer</span> housekeepingTicker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>plegCh <span class="token operator">:=</span> kl<span class="token punctuation">.</span>pleg<span class="token punctuation">.</span><span class="token function">Watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> rs <span class="token operator">:=</span> kl<span class="token punctuation">.</span>runtimeState<span class="token punctuation">.</span><span class="token function">runtimeErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"skipping pod synchronization - %v"</span><span class="token punctuation">,</span> rs<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>kl<span class="token punctuation">.</span>syncLoopMonitor<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>kl<span class="token punctuation">.</span><span class="token function">syncLoopIteration</span><span class="token punctuation">(</span>updates<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> syncTicker<span class="token punctuation">.</span>C<span class="token punctuation">,</span> housekeepingTicker<span class="token punctuation">.</span>C<span class="token punctuation">,</span> plegCh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>kl<span class="token punctuation">.</span>syncLoopMonitor<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法的主要逻辑在<code>kl.syncLoopIteration</code>中实现，点进去，查看和Pod增删改有关的核心代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// in pkg/kubelet/kubelet.go</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">syncLoopIteration</span><span class="token punctuation">(</span>configCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> kubetypes<span class="token punctuation">.</span>PodUpdate<span class="token punctuation">,</span> handler SyncHandler<span class="token punctuation">,</span>syncCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> housekeepingCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> plegCh <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token operator">*</span>pleg<span class="token punctuation">.</span>PodLifecycleEvent<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> u<span class="token punctuation">,</span> open <span class="token operator">:=</span> <span class="token operator">&lt;-</span>configCh<span class="token punctuation">:</span><span class="token comment">// Update from a config source; dispatch it to the right handler</span><span class="token comment">// callback.</span><span class="token keyword">if</span> <span class="token operator">!</span>open <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Update channel is closed. Exiting the sync loop."</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> u<span class="token punctuation">.</span>Op <span class="token punctuation">&#123;</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>ADD<span class="token punctuation">:</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (ADD, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// After restarting, kubelet will get all existing pods through</span><span class="token comment">// ADD as if they are new pods. These pods will then go through the</span><span class="token comment">// admission process and *may* be rejected. This can be resolved</span><span class="token comment">// once we have checkpointing.</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodAdditions</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>UPDATE<span class="token punctuation">:</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (UPDATE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">PodsWithDeletiontimestamps</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodUpdates</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>REMOVE<span class="token punctuation">:</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (REMOVE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodRemoves</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>RECONCILE<span class="token punctuation">:</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (RECONCILE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodReconcile</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>DELETE<span class="token punctuation">:</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (DELETE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// DELETE is treated as a UPDATE because of graceful deletion.</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodUpdates</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>RESTORE<span class="token punctuation">:</span>glog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"SyncLoop (RESTORE, %q): %q"</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// These are pods restored from the checkpoint. Treat them as new</span><span class="token comment">// pods.</span>handler<span class="token punctuation">.</span><span class="token function">HandlePodAdditions</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>Pods<span class="token punctuation">)</span><span class="token keyword">case</span> kubetypes<span class="token punctuation">.</span>SET<span class="token punctuation">:</span><span class="token comment">// TODO: Do we want to support this?</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Kubelet does not support snapshot update"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>   <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该模块将同时监视Pod 信息的变化，一旦某个来源的 Pod 信息发生了更新（创建/更新/删除），这个 channel 中就会出现被更新的 Pod 信息和更新的具体操作。</p><p>其中，<code>HandlePodAdditions</code>就是创建Pod的接口，其实现体为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// in pkg/kubelet/kubelet.go</span><span class="token comment">// HandlePodAdditions is the callback in SyncHandler for pods being added from</span><span class="token comment">// a config source.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">HandlePodAdditions</span><span class="token punctuation">(</span>pods <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>start <span class="token operator">:=</span> kl<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>sliceutils<span class="token punctuation">.</span><span class="token function">PodsByCreationTime</span><span class="token punctuation">(</span>pods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pod <span class="token operator">:=</span> <span class="token keyword">range</span> pods <span class="token punctuation">&#123;</span>existingPods <span class="token operator">:=</span> kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">GetPods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Always add the pod to the pod manager. Kubelet relies on the pod</span><span class="token comment">// manager as the source of truth for the desired state. If a pod does</span><span class="token comment">// not exist in the pod manager, it means that it has been deleted in</span><span class="token comment">// the apiserver and no action (other than cleanup) is required.</span>kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">AddPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token keyword">if</span> kubepod<span class="token punctuation">.</span><span class="token function">IsMirrorPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span><span class="token function">handleMirrorPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>kl<span class="token punctuation">.</span><span class="token function">podIsTerminated</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Only go through the admission process if the pod is not</span><span class="token comment">// terminated.</span><span class="token comment">// We failed pods that we rejected, so activePods include all admitted</span><span class="token comment">// pods that are alive.</span>activePods <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">filterOutTerminatedPods</span><span class="token punctuation">(</span>existingPods<span class="token punctuation">)</span><span class="token comment">// Check if we can admit the pod; if not, reject it.</span><span class="token keyword">if</span> ok<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> message <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">canAdmitPod</span><span class="token punctuation">(</span>activePods<span class="token punctuation">,</span> pod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span><span class="token function">rejectPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>mirrorPod<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> kl<span class="token punctuation">.</span>podManager<span class="token punctuation">.</span><span class="token function">GetMirrorPodByPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>        <span class="token comment">//把 pod 分配给给 worker 做异步处理,创建pod</span>kl<span class="token punctuation">.</span><span class="token function">dispatchWork</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> kubetypes<span class="token punctuation">.</span>SyncPodCreate<span class="token punctuation">,</span> mirrorPod<span class="token punctuation">,</span> start<span class="token punctuation">)</span>kl<span class="token punctuation">.</span>probeManager<span class="token punctuation">.</span><span class="token function">AddPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其主要任务为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> 按照创建时间给pods进行排序；<span class="token operator">></span> 将pod添加到pod管理器中，如果有pod不存在在pod管理器中，那么这个pod表示已经被删除了；<span class="token operator">></span> 校验pod 是否能在该节点运行，如果不可以直接拒绝；<span class="token operator">></span> 调用dispatchWork把 pod 分配给给 worker 做异步处理,创建pod；<span class="token operator">></span> 将pod添加到probeManager中，如果 pod 中定义了 readiness 和 liveness 健康检查，启动 <span class="token operator">></span> goroutine 定期进行检测；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，真正创建Pod的其实是方法<code>dispatchWork</code>，其核心代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// in pkg/kubelet/kubelet.go</span><span class="token comment">// dispatchWork starts the asynchronous sync of the pod in a pod worker.</span><span class="token comment">// If the pod is terminated, dispatchWork</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">dispatchWork</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> syncType kubetypes<span class="token punctuation">.</span>SyncPodType<span class="token punctuation">,</span> mirrorPod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> start time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token comment">// Run the sync in an async worker.</span>kl<span class="token punctuation">.</span>podWorkers<span class="token punctuation">.</span><span class="token function">UpdatePod</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>UpdatePodOptions<span class="token punctuation">&#123;</span>Pod<span class="token punctuation">:</span>        pod<span class="token punctuation">,</span>MirrorPod<span class="token punctuation">:</span>  mirrorPod<span class="token punctuation">,</span>UpdateType<span class="token punctuation">:</span> syncType<span class="token punctuation">,</span>OnCompleteFunc<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>metrics<span class="token punctuation">.</span>PodWorkerLatency<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>syncType<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">SinceInMicroseconds</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，该方法会封装一个<code>UpdatePodOptions</code>结构体丢给<code>podWorkers.UpdatePod</code>去执行，该文件位于 pkg/kubelet/pod_workers.go 中。我们点进去看看：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Apply the new setting to the specified pod.</span><span class="token comment">// If the options provide an OnCompleteFunc, the function is invoked if the update is accepted.</span><span class="token comment">// Update requests are ignored if a kill pod request is pending.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>podWorkers<span class="token punctuation">)</span> <span class="token function">UpdatePod</span><span class="token punctuation">(</span>options <span class="token operator">*</span>UpdatePodOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pod <span class="token operator">:=</span> options<span class="token punctuation">.</span>Poduid <span class="token operator">:=</span> pod<span class="token punctuation">.</span>UID<span class="token keyword">var</span> podUpdates <span class="token keyword">chan</span> UpdatePodOptions<span class="token keyword">var</span> exists <span class="token builtin">bool</span>p<span class="token punctuation">.</span>podLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> p<span class="token punctuation">.</span>podLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//如果该pod在podUpdates数组里面不存在，那么就创建channel，并启动异步线程</span><span class="token keyword">if</span> podUpdates<span class="token punctuation">,</span> exists <span class="token operator">=</span> p<span class="token punctuation">.</span>podUpdates<span class="token punctuation">[</span>uid<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>exists <span class="token punctuation">&#123;</span><span class="token comment">// We need to have a buffer here, because checkForUpdates() method that</span><span class="token comment">// puts an update into channel is called from the same goroutine where</span><span class="token comment">// the channel is consumed. However, it is guaranteed that in such case</span><span class="token comment">// the channel is empty, so buffer of size 1 is enough.</span>podUpdates <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> UpdatePodOptions<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>podUpdates<span class="token punctuation">[</span>uid<span class="token punctuation">]</span> <span class="token operator">=</span> podUpdates<span class="token comment">// Creating a new pod worker either means this is a new pod, or that the</span><span class="token comment">// kubelet just restarted. In either case the kubelet is willing to believe</span><span class="token comment">// the status of the pod for the first pod worker sync. See corresponding</span><span class="token comment">// comment in syncPod.</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> runtime<span class="token punctuation">.</span><span class="token function">HandleCrash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">managePodLoop</span><span class="token punctuation">(</span>podUpdates<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>isWorking<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>isWorking<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>podUpdates <span class="token operator">&lt;-</span> <span class="token operator">*</span>options<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// if a request to kill a pod is pending, we do not let anything overwrite that request.</span>update<span class="token punctuation">,</span> found <span class="token operator">:=</span> p<span class="token punctuation">.</span>lastUndeliveredWorkUpdate<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>found <span class="token operator">||</span> update<span class="token punctuation">.</span>UpdateType <span class="token operator">!=</span> kubetypes<span class="token punctuation">.</span>SyncPodKill <span class="token punctuation">&#123;</span>p<span class="token punctuation">.</span>lastUndeliveredWorkUpdate<span class="token punctuation">[</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>options<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法会加锁之后获取<code>podUpdates</code>数组里面数据，如果不存在那么会创建一个channel然后执行一个异步协程，我们进入<code>managePodLoop</code>来看看：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>podWorkers<span class="token punctuation">)</span> <span class="token function">managePodLoop</span><span class="token punctuation">(</span>podUpdates <span class="token operator">&lt;-</span><span class="token keyword">chan</span> UpdatePodOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> lastSyncTime time<span class="token punctuation">.</span>Time<span class="token keyword">for</span> update <span class="token operator">:=</span> <span class="token keyword">range</span> podUpdates <span class="token punctuation">&#123;</span>err <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>podUID <span class="token operator">:=</span> update<span class="token punctuation">.</span>Pod<span class="token punctuation">.</span>UID<span class="token comment">// This is a blocking call that would return only if the cache</span><span class="token comment">// has an entry for the pod that is newer than minRuntimeCache</span><span class="token comment">// Time. This ensures the worker doesn't start syncing until</span><span class="token comment">// after the cache is at least newer than the finished time of</span><span class="token comment">// the previous sync.</span>status<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>podCache<span class="token punctuation">.</span><span class="token function">GetNewerThan</span><span class="token punctuation">(</span>podUID<span class="token punctuation">,</span> lastSyncTime<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// This is the legacy event thrown by manage pod loop</span><span class="token comment">// all other events are now dispatched from syncPodFn</span>p<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedSync<span class="token punctuation">,</span> <span class="token string">"error determining status: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span>err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">syncPodFn</span><span class="token punctuation">(</span>syncPodOptions<span class="token punctuation">&#123;</span>mirrorPod<span class="token punctuation">:</span>      update<span class="token punctuation">.</span>MirrorPod<span class="token punctuation">,</span>pod<span class="token punctuation">:</span>            update<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span>podStatus<span class="token punctuation">:</span>      status<span class="token punctuation">,</span>killPodOptions<span class="token punctuation">:</span> update<span class="token punctuation">.</span>KillPodOptions<span class="token punctuation">,</span>updateType<span class="token punctuation">:</span>     update<span class="token punctuation">.</span>UpdateType<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>lastSyncTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// notify the call-back function if the operation succeeded or not</span><span class="token keyword">if</span> update<span class="token punctuation">.</span>OnCompleteFunc <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>update<span class="token punctuation">.</span><span class="token function">OnCompleteFunc</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// IMPORTANT: we do not log errors here, the syncPodFn is responsible for logging errors</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Error syncing pod %s (%q), skipping: %v"</span><span class="token punctuation">,</span> update<span class="token punctuation">.</span>Pod<span class="token punctuation">.</span>UID<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>p<span class="token punctuation">.</span><span class="token function">wrapUp</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>Pod<span class="token punctuation">.</span>UID<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法会遍历channel里面的数据，然后调用<code>syncPodFn</code>方法并传入一个<code>syncPodOptions</code>。syncPodFn是啥？实际上，kubelet会在执行<code>NewMainKubelet</code>方法时调用<code>newPodWorkers</code>方法，将syncPodFn设置为 pkg/kubelet/kubelet.go 下的<code>syncPod</code>方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewMainKubelet</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>klet <span class="token operator">:=</span> <span class="token operator">&amp;</span>Kubelet<span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">...</span>klet<span class="token punctuation">.</span>podWorkers <span class="token operator">=</span> <span class="token function">newPodWorkers</span><span class="token punctuation">(</span>klet<span class="token punctuation">.</span>syncPod<span class="token punctuation">,</span> kubeDeps<span class="token punctuation">.</span>Recorder<span class="token punctuation">,</span> klet<span class="token punctuation">.</span>workQueue<span class="token punctuation">,</span> klet<span class="token punctuation">.</span>resyncInterval<span class="token punctuation">,</span> backOffPeriod<span class="token punctuation">,</span> klet<span class="token punctuation">.</span>podCache<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们的重点，来到了<code>syncPod</code>中。该方法进行的工作很多很多，不过我都不知道…，以后在学吧。在该方法的注释中，这样解释到：</p><blockquote><p>// The workflow is:<br>// * If the pod is being created, record pod worker start latency<br>// * Call generateAPIPodStatus to prepare an v1.PodStatus for the pod<br>// * If the pod is being seen as running for the first time, record pod<br>//   start latency<br>// * Update the status of the pod in the status manager<br>// * Kill the pod if it should not be running<br>// * Create a mirror pod if the pod is a static pod, and does not<br>//   already have a mirror pod<br>// * Create the data directories for the pod if they do not exist<br>// * Wait for volumes to attach/mount<br>// * Fetch the pull secrets for the pod<br>// * Call the container runtime’s SyncPod callback<br>// * Update the traffic shaping for the pod’s ingress and egress limits<br>//<br>// If any step of this workflow errors, the error is returned, and is repeated<br>// on the next syncPod call.</p></blockquote><p>这些东西我们先不管，现在只需要知道，该方法会完成Pod基础目录创建（包括和volume有关的）以及对volume的挂载。也就是说，和本漏洞有关的代码，从这里开始！</p><h4 id="Volume挂载过程"><a href="#Volume挂载过程" class="headerlink" title="Volume挂载过程"></a>Volume挂载过程</h4><p>在一个Pod开始运行前，k8s需要做许多事情。首先，Kubelet为Pod在宿主机上创建了一个基础目录:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">syncPod</span><span class="token punctuation">(</span>o syncPodOptions<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token comment">// Make data directories for the pod</span><span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span><span class="token function">makePodDataDirs</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedToMakePodDataDirectories<span class="token punctuation">,</span> <span class="token string">"error making pod data directories: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to make pod data directories for pod %q: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span>       <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<code>syncPod</code>通过调用<code>makePodDataDirs</code>方法来为Pod创建基础目录，我们跟进看看：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// makePodDataDirs creates the dirs for the pod datas.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kl <span class="token operator">*</span>Kubelet<span class="token punctuation">)</span> <span class="token function">makePodDataDirs</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>uid <span class="token operator">:=</span> pod<span class="token punctuation">.</span>UID<span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span><span class="token function">getPodDir</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0750</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>os<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span><span class="token function">getPodVolumesDir</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0750</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>os<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>kl<span class="token punctuation">.</span><span class="token function">getPodPluginsDir</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0750</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>os<span class="token punctuation">.</span><span class="token function">IsExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法一共调用了三次<code>MkdirAll</code>方法，其中第二次调用，就是关于<code>volume</code>目录的。接着，我们回到<code>synPod</code>，观察下一个方法调用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Volume manager will not mount volumes for terminated pods</span><span class="token keyword">if</span> <span class="token operator">!</span>kl<span class="token punctuation">.</span><span class="token function">podIsTerminated</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Wait for volumes to attach/mount</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> kl<span class="token punctuation">.</span>volumeManager<span class="token punctuation">.</span><span class="token function">WaitForAttachAndMount</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        kl<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span><span class="token function">Eventf</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>EventTypeWarning<span class="token punctuation">,</span> events<span class="token punctuation">.</span>FailedMountVolume<span class="token punctuation">,</span> <span class="token string">"Unable to mount volumes for pod %q: %v"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to mount volumes for pod %q: %v; skipping pod"</span><span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> err    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，Kubelet在为Pod创建完基础目录后，会等待Kubelet Volume Manager（<code>pkg/kubelet/volumemanager</code>）将Pod声明文件中声明的卷挂载到上述Volumes目录下。</p><p>完成上述操作后，再回到<code>syncPod</code>中，它会调用<code>containerRuntime.SyncPod</code>，来真正的创建Pod。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Call the container runtime's SyncPod callback</span>result <span class="token operator">:=</span> kl<span class="token punctuation">.</span>containerRuntime<span class="token punctuation">.</span><span class="token function">SyncPod</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> apiPodStatus<span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> pullSecrets<span class="token punctuation">,</span> kl<span class="token punctuation">.</span>backOff<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该文件位于 pkg/kubelet/kuberuntime/kuberuntime_manager.go。直接看该代码的第5步的核心部分：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>kubeGenericRuntimeManager<span class="token punctuation">)</span> <span class="token function">SyncPod</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token comment">// Step 5: start the init container.</span>    <span class="token operator">...</span>    <span class="token keyword">if</span> msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">startContainer</span><span class="token punctuation">(</span>podSandboxID<span class="token punctuation">,</span> podSandboxConfig<span class="token punctuation">,</span> container<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> podStatus<span class="token punctuation">,</span> pullSecrets<span class="token punctuation">,</span> podIP<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>startContainerResult<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>utilruntime<span class="token punctuation">.</span><span class="token function">HandleError</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"init container start failed: %v: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>    <span class="token operator">...</span><span class="token operator">...</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<code>startContainer</code>，发现其会调用<code>m.generateContainerConfig</code>来为<code>容器运行时</code>（Runtime）生成配置文件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">containerConfig<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">generateContainerConfig</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> restartCount<span class="token punctuation">,</span> podIP<span class="token punctuation">,</span> imageRef<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从<code>generateContainerConfig</code>一直往下追溯，直到位于 pkg/kubelet/kubelet_pods.go 中的<code>GenerateRunContainerOptions</code>方法。该方法会调用<code>makeMounts</code>来生成容器运行时的<code>挂载映射表</code>:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// in pkg/kubelet/kubelet_pods.go GenerateRunContainerOptions function</span>mounts<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">makeMounts</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> kl<span class="token punctuation">.</span><span class="token function">getPodDir</span><span class="token punctuation">(</span>pod<span class="token punctuation">.</span>UID<span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> hostDomainName<span class="token punctuation">,</span> podIP<span class="token punctuation">,</span> volumes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而<code>makeMounts</code>，就是漏洞的关键所在。</p><hr><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>先进<code>makdMounts</code>里看下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// in pkg/kubelet/kubelet_pods.go</span><span class="token comment">// makeMounts determines the mount points for the given container.</span><span class="token keyword">func</span> <span class="token function">makeMounts</span><span class="token punctuation">(</span>pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> podDir <span class="token builtin">string</span><span class="token punctuation">,</span> container <span class="token operator">*</span>v1<span class="token punctuation">.</span>Container<span class="token punctuation">,</span> hostName<span class="token punctuation">,</span> hostDomain<span class="token punctuation">,</span> podIP <span class="token builtin">string</span><span class="token punctuation">,</span> podVolumes kubecontainer<span class="token punctuation">.</span>VolumeMap<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>kubecontainer<span class="token punctuation">.</span>Mount<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>mounts <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>kubecontainer<span class="token punctuation">.</span>Mount<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> mount <span class="token operator">:=</span> <span class="token keyword">range</span> container<span class="token punctuation">.</span>VolumeMounts <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>hostPath<span class="token punctuation">,</span> err <span class="token operator">:=</span> volume<span class="token punctuation">.</span><span class="token function">GetPath</span><span class="token punctuation">(</span>vol<span class="token punctuation">.</span>Mounter<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span class="token keyword">if</span> mount<span class="token punctuation">.</span>SubPath <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> filepath<span class="token punctuation">.</span><span class="token function">IsAbs</span><span class="token punctuation">(</span>mount<span class="token punctuation">.</span>SubPath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error SubPath `%s` must not be an absolute path"</span><span class="token punctuation">,</span> mount<span class="token punctuation">.</span>SubPath<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>err <span class="token operator">=</span> volumevalidation<span class="token punctuation">.</span><span class="token function">ValidatePathNoBacksteps</span><span class="token punctuation">(</span>mount<span class="token punctuation">.</span>SubPath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unable to provision SubPath `%s`: %v"</span><span class="token punctuation">,</span> mount<span class="token punctuation">.</span>SubPath<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fileinfo<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Lstat</span><span class="token punctuation">(</span>hostPath<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span>perm <span class="token operator">:=</span> fileinfo<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 关键点1</span>hostPath <span class="token operator">=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>hostPath<span class="token punctuation">,</span> mount<span class="token punctuation">.</span>SubPath<span class="token punctuation">)</span><span class="token keyword">if</span> subPathExists<span class="token punctuation">,</span> err <span class="token operator">:=</span> utilfile<span class="token punctuation">.</span><span class="token function">FileOrSymlinkExists</span><span class="token punctuation">(</span>hostPath<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Could not determine if subPath %s exists; will not attempt to change its permissions"</span><span class="token punctuation">,</span> hostPath<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>subPathExists <span class="token punctuation">&#123;</span><span class="token comment">// Create the sub path now because if it's auto-created later when referenced, it may have an</span><span class="token comment">// incorrect ownership and mode. For example, the sub path directory must have at least g+rwx</span><span class="token comment">// when the pod specifies an fsGroup, and if the directory is not created here, Docker will</span><span class="token comment">// later auto-create it with the incorrect mode 0750</span><span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>hostPath<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>glog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to mkdir:%s"</span><span class="token punctuation">,</span> hostPath<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span class="token comment">// chmod the sub path because umask may have prevented us from making the sub path with the same</span><span class="token comment">// permissions as the mounter path</span><span class="token keyword">if</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Chmod</span><span class="token punctuation">(</span>hostPath<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span>        <span class="token comment">// 关键点2</span>mounts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>mounts<span class="token punctuation">,</span> kubecontainer<span class="token punctuation">.</span>Mount<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span>           mount<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>ContainerPath<span class="token punctuation">:</span>  containerPath<span class="token punctuation">,</span>HostPath<span class="token punctuation">:</span>       hostPath<span class="token punctuation">,</span>ReadOnly<span class="token punctuation">:</span>       mount<span class="token punctuation">.</span>ReadOnly<span class="token punctuation">,</span>SELinuxRelabel<span class="token punctuation">:</span> relabelVolume<span class="token punctuation">,</span>Propagation<span class="token punctuation">:</span>    propagation<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span><span class="token keyword">return</span> mounts<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，该方法体中就出现了<code>subPath</code>这个东西。现在来分析下，在生成挂载映射表时，它是怎么处理<code>hostPath</code>和<code>subPath</code>的。假设<code>subPath</code>不为空。</p><p>首先，检验<code>subPath</code>是否为绝对路径，如果是则err，因为子路径不能为绝对路径。然后，检验<code>subPath</code>中是否有<code>..</code>这个东西，也即是否有调用上级目录的行为，如果有，则err。后者的存在至关重要，正因为该检查，使Pod无法通过<code>合法挂载目录/../</code>的方法来进行逃逸。</p><p>然后就没了。它仅仅对<code>subPath</code>做了上述两步检查，随后就直接和<code>hostPath</code>进行拼接，得到<code>subPath的</code>绝对路径，并检验是否已存在。没错，仅仅就这两步。合并完成后，Kubelet将该绝对路径加入到挂载映射表（<code>mounts</code>变量）中，最终，该表被交给Runtime来创建容器。</p><p>在一般的Pod安全策略中，会限制Pod只能挂载指定目录的卷，假设为<code>/tmp/</code>。但是，它并不会现在Pod在该卷下的<code>subPath</code>，并且通过上述源码分析可知源码内部也没有进行什么限制。</p><p>问题来了，攻击者可以通过将<code>subPath</code>设成软连接的方式，在合法的<code>hostPaht</code>中逃逸到任何想去的宿主机目录中。</p><p>比如，攻击者首先创建一个<code>Pod1</code>，将容器内目录<code>/vuln</code>合法的挂载到<code>/tmp/test</code>下，现在，他在卷中创建一个软连接，使其指向宿主机的根目录<code>/</code>，命令很简单：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl <span class="token builtin class-name">exec</span> -it stage-1-container -- <span class="token function">ln</span> -s / /vuln/xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样一来，在宿主机的<code>/tmp/test</code>下就多出了指向<code>/</code>的软连接<code>xxx</code>。接下来，攻击者又创建了<code>Pod2</code>，并将<code>subPath</code>设为<code>xxx</code>。基于前面的分析，Kubelet会直接在宿主机上生成指向hostPath+subPath的路径传递给Runtime，致使<code>Pod2</code>的挂载目录直接跳到了宿主机的<code>/</code>处，实现逃逸！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> k8s </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> 云安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软硬链接</title>
      <link href="/linux-ruan-ying-lian-jie/"/>
      <url>/linux-ruan-ying-lian-jie/</url>
      
        <content type="html"><![CDATA[<p>在Linux中，ln命令会在文件之间创建链接，这种操作实际上是给系统中已有的某个文件指定另外一个可用于访问它的名称，看上去就像是Windows的快捷方式。但是，链接分为两种，一种叫作<code>硬链接(Hard Link) </code>，另一种叫作<code>符号链接(Symbolic Link)</code>，后者又称为软链接。实际上，软链接才真正像是Win中的快捷方式，而硬链接却大有不同。</p><span id="more"></span><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s <span class="token builtin class-name">source</span> dist <span class="token comment"># 建立软链接</span><span class="token function">ln</span> <span class="token builtin class-name">source</span> dist    <span class="token comment"># 建立硬链接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h2><p>要想了解软硬链接的区别，就要先明白<code>inode</code>这一概念，这里简单阐述下。</p><p>文件储存在硬盘上，硬盘的最小存储单位叫做<code>扇区(Sector)</code>，每个扇区储存512字节。操作系统在读取硬盘的时候，不会一个个扇区去读，这样效率太低了，而是一次性连续读取多个扇区，即一次读取一个<code>块(block)</code>。这种由多个扇区组成的块，是文件存取的最小单位。<code>块</code>的大小，最常见的是4KB，即连续八个sector组成一个block。</p><p>文件数据都存储的<code>块</code>中，那么很显然，我们还必须找到一个地方存储文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等，它们能够唯一的<code>标识</code>一个文件。这种存储文件元信息的区域就叫做<code>inode</code>，中文译名为<code>索引节点</code>。</p><p>对于一个文件来说，有唯一的<code>inode</code>与之对应，而对于一个<code>inode</code>而言，可以有<code>多个</code>文件名/路径与之对应。也就是说，一个<code>inode</code>唯一标识一个文件，但是找个文件可以有多种不同的访问路径。这里啰嗦一嘴，Linux下一切皆文件，包括目录、硬盘等等。</p><p>可以使用<code>ls -i example.txt</code>来查看某文件的inode编号，同样，可以使用<code>ls -li</code>来查看当前目录下所有文件的inode编号，第一列就是。</p><p><img src="/Linux%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5/e7e444d37978f394.png"></p><hr><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>软连接实际上是通过名字来引用另外一个文件，类似于Windows的快捷方式。软连接和目标文件有着<code>不同的inode号</code>，也就是说软链接本身是一个独立的文件。可以理解为，软链接是一个独立文件，但是这个文件存储的是目标文件的路径，起到指针的作用。</p><p><img src="/Linux%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5/15dfc1432e96b471.png"></p><p>当系统访问软链接后，会自动跳转到对应的目标文件处进行处理。当你使用<code>vim abc_s</code>对该文件进行更改时，实质上更改的是abc.txt，当再次打开abc.txt后，发现其内容就是你刚改的东西。</p><hr><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p>硬链接和软链接大不相同。硬链接是通过<code>inode</code>引用另外一个文件，因此硬链接和目标文件具有<code>相同的inode号</code>。也就是说，软链接是一个独立文件，但是硬链接和目标文件本质上就是同一个，可以理解为一个实际文件有多个文件名。</p><p><img src="/Linux%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5/edd13d190dd04be9.png"></p><p>硬链接与文件原有的名字是平权的，在Linux看来它们是等价的。由于这个原因，硬链接不能连接两个不同文件系统上的文件，但是软链接就可以跨文件系统。</p><p>每当我们为文件创建一个硬链接，该文件的硬链接数就是增加，上图中的2就是硬链接数。可以看到，因为abc_h和abc.txt本质上是一个文件，所以它们的硬链接数都为2。硬链接数也就表示的就是指有多少个文件的名字/路径和该文件的inode产生映射关系。<code>info ln</code>中这么解释硬链接：</p><blockquote><p> A “hard link” is another name for an existing file; the link and the<br>original are indistinguishable.  Technically speaking, they share the<br>same inode, and the inode contains all the information about a<br>file–indeed, it is not incorrect to say that the inode is the file.</p></blockquote><p>Linux是不允许用户将硬链接指向的<code>目录</code>的。但是，Linux一切皆文件，包括目录，因此目录理应也可以硬链接。实际上，目录是有硬链接的，只不过这个操作只能由系统完成，用户是不能进行的。</p><hr><h2 id="目录的硬链接"><a href="#目录的硬链接" class="headerlink" title="目录的硬链接"></a>目录的硬链接</h2><p><img src="/Linux%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5/f10172dff4a76d0c.png"></p><p>可以看到，新创建的目录默认有两个硬链接数，说明有两条路径指向这个目录文件的inode。很显然，<code>/home/sakura/test/testDir</code>也即这个目录本身是一个，那么另一个是什么呢？</p><p>我们知道，每个目录都可以通过<code>.</code>来表明当前目录，也就是指向它自己。进入<code>testDir</code>内部，使用<code>ln -ali</code>来查看更详细的信息，发现<code>.</code>的inode号和<code>testDir</code>的inode号一模一样。也就是说，目录文件初始的两个硬链接，一个是其本身，另一个就是其下的<code>.</code></p><p><img src="/Linux%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5/99fedeb837365ac9.png"></p><p>现在，我们在<code>testDir</code>下再新建一个目录，重新查看其硬链接数，发现变为了3。</p><p><img src="/Linux%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5/89772db97f5081aa.png"></p><p>这是因为，新的目录下的<code>..</code>指向该目录的上级目录，就是<code>testDir</code>，它也是testDir的inode的一条路径，所以硬链接数变为了3。更一般的，一个新建的目录初始硬链接数为2，每当在该目录下新建一个子目录，其硬链接数就会加一，关系可以归为下图：</p><p><img src="/Linux%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5/e3a1dcff818eb9d3.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础(三): 容器数据卷</title>
      <link href="/docker-ji-chu-san-rong-qi-shu-ju-juan/"/>
      <url>/docker-ji-chu-san-rong-qi-shu-ju-juan/</url>
      
        <content type="html"><![CDATA[<p>想象一下，你的公司使用docker在容器中部署了一个电商项目，数据全部存在容器中。现在，你一不小心把这个容器删了，里面的数据全没了，再也无法恢复。完了，公司的核心资产被你搞没了，猜猜你能在牢里蹲多久？</p><span id="more"></span><h2 id="啥是数据卷"><a href="#啥是数据卷" class="headerlink" title="啥是数据卷"></a>啥是数据卷</h2><p>当然，一个公司业务不可能这么脆弱，但是容器天生就有数据不持久的特点，数据随容器即生即灭，那有什么方法能让其中的重要数据持久化呢？答案就是<code>备份</code>。前面讲过，docker可以通过cp命令和export将容器中的数据备份到主机上，这不失是一种方法。但是，这种操作是一次性的，也即每需要备份时都要手动执行一次，当业务大时，这是不可想象的。那么有没有一种办法，使容器中特定目录和主机之间建立一个持久性的联系，实现自动备份？有的，这就是docker容器数据卷，简称<code>容器卷</code>，或<code>数据卷</code>，或<code>卷</code>。</p><p>所谓卷，就是在主机的指定目录和容器内指定目录之间建立一个<code>双向</code>的管道，二者中的数据完全相同，且任意一者的更改都会同步到另一者之中，实现实时备份与数据共享。</p><blockquote><p><strong>数据卷(Data Volumes)<strong>是一个可供容器使用的特殊目录，它将主机OS目录直接映射进容器，类似于Linux的</strong>mount</strong>行为。</p><p>​    ■ 数据卷可以在容器之间共享和重用，容器间传递数据将变得高效与方便；</p><p>​    ■ 对数据卷内数据的修改会立马生效，无论是容器内操作还是本地操作；</p><p>​    ■ 对数据卷的更新不会影响镜像，解耦开应用和数据；</p><p>​    ■ 卷会一直存在，直到没有容器使用，可以安全卸载它；</p></blockquote><hr><h2 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h2><p>Docker提供<code>volume</code>子命令来管理数据卷，如下命令可以在本地创建一个名为test的数据卷：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume create -d <span class="token builtin class-name">local</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该数据卷存在本地主机的 <code>/var/lib/docker/volumes</code> 路径下，在该路径下会新建一个名为test的目录，就是创建的数据卷。使用<code>inspect</code>查看卷的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> voulme inpect <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到如下结果，</p><img src="https://i.bmp.ovh/imgs/2022/01/0569fbc976e494b7.png" style="zoom: 80%;" /><p>可以看到，<code>Mountpoint</code>值为<code>/var/lib/docker/volumes/test/_data</code>，说明改卷会将选定的容器目录映射进主机的该目录中。如果想要让容器使用该卷，使用<code>run -v test:...</code>来绑定该卷即可。</p><p>出来create和inspect，docker volume还支持<code>ls</code>（列出已有数据卷）、<code>prune</code>（清理无用数据卷）、<code>rm</code>（删除数据卷）等，当然这些命令都比较简单。</p><hr><h2 id="绑定数据卷"><a href="#绑定数据卷" class="headerlink" title="绑定数据卷"></a>绑定数据卷</h2><p>创建完数据卷后，使用<code>run</code>的<code>-v</code>（volume）选项来将容器的指定目录绑定上该数据卷，建立容器目录和主机目录之间的双向映射，以数据卷test为例，具体命令为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -v test:/data --name<span class="token operator">=</span>r3 redits:6.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令将会创建容器r3，并将r3的<code>/data</code>目录映射到主机<code>/var/lib/docker/volumes/test/_data</code>目录中，当对r3的该目录进行操作时，主机也会进行同步。</p><img src="https://i.bmp.ovh/imgs/2022/01/ccdd351da2233cae.png" style="zoom:80%;" /><p>同样，在主机的对应目录下进行操作，/data也会同步。比如，前者创建一个文件或目录，后者也会跟着创建一个文件或目录，前者对某个文件进行更改，后者的该文件也会相应更新。</p><p>现在你肯定想问，能不能不预先创建数据卷，直接在<code>run</code>时创建数据卷，进行目录映射，且指定主机目录？当然可以，依然使用<code>-v</code>选项，以r1的/data目录为例，命令形式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -v 主机目录:/data --name<span class="token operator">=</span>r1 redits:6.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以用<code>--mount</code>选项来进行绑定。比如，使用 training/webapp 镜像创建 Web 容器，并创建一个数据卷挂载到容器的/opt/webapp 目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -P --name web --mount <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/webapp,destination<span class="token operator">=</span>/opt/ webapp training/webapp python app.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外，<code>-v</code>是可以同时创建多个数据卷的，完成多对目录的映射（–mount应该也可以，没试过）。命令形式也很间，用多个-v就行了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -v 主机目录1:容器目录1 -v 主机目录2:容器目录2 --name<span class="token operator">=</span>r1 redits:6.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里建议，在使用存储类服务时，一定要记得用数据卷，尤其是<strong>mysql</strong>这种！在用mysql创建容器时，一般都会将<code>log</code>、<code>data</code>、<code>config</code>均创建一个数据卷进行备份，因此，创建mysql容器通常用命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -p <span class="token number">3307</span>:3306 --name mysql-master <span class="token punctuation">\</span>-v /mydata/mysql-master/log:/var/log/mysql <span class="token punctuation">\</span>-v /mydata/mysql-master/data:/var/lib/mysql <span class="token punctuation">\</span>-v /mydata/mysql-master/conf:/etc/mysql <span class="token punctuation">\</span>-e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root  <span class="token punctuation">\</span>-d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>数据卷有两种权限，一是<code>rw</code>（读写），一是<code>ro</code>（只读）。这里的权限是只针对容器而不针对主机的。比如，<code>rw</code>指容器对主机相应目录可读可写，<code>ro</code>指容器对主机相应目录只能读不能写。</p><p>容器使用数据卷的默认权限是<code>rw</code>，如果想要用<code>ro</code>，对命令进行如下更改即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d -v 主机目录:/data:ro --name<span class="token operator">=</span>r1 redits:6.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，当使用<code>ro</code>后，不是指容器内的写操作不会被映射，而是指容器已经无法对该目录（容器内）进行任何写操作了，因为它是一个<code>Read-only file system</code>。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/3aa48b47a02047be.png"></p><hr><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>如果你需要在多个容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器。数据卷容器也是一个容器，但是它的目的是专门提供数据卷给其他容器挂载。</p><p>首先，创建一个容器dbdata，并在其中创建一个数据卷挂载到主机的/dbdata目录下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -it -v /dbdata:/ --name dbdata ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，可以在其他容器中使用<code>--volumes-from</code>来挂载dbdata容器中的数据卷，例如创建db1和db2两个容器，并从dbdata容器挂载数据卷：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -it --volumes-from dbdata --name db1 ubuntu<span class="token function">docker</span> run -it --volumes-from dbdata --name db2 ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时，容器db1和db2都挂载同一个数据卷到相同的/dbdata目录中，三个容器任何一方在该目录下的写入，其他容器都可以看到，当然，主机也能看到。</p><p>从<code>--volumes-from</code>这个名字就可以看出来，这种关系可以理解为数据卷的<strong>继承</strong>。既然如此，那么可不可以层层继承？答案是可以的。比如，在上面的基础上，我们可以在创建一个容器db3，它将从db1处继承容器卷，这样一来，四台容器和主机都会互相连通。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -it --volumes-from db1 --name db3 ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果删除了”父类“容器（包括dbdata、db1和db2），数据卷并不会被删除，这意味着db3依然能够通过其与主机进行映射，即使其”父类“已经消失了。更好玩的是，当你停止了dbdata、db1和db2（并没有删除），然后在主机相应目录或db3相应目录进行写入，比如创建一个a.txt。然后再打开上面上个容器，它们仍然会同步这些数据，即出现a.txt。</p><hr><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>我挺好奇数据卷的实现原理的，比如它到底是对多个空间进行相互拷贝还是建立了一个共享空间，又比如它不属于联合文件系统（Union File System）到底是什么意思，这点我还没搞懂，而且也没查到相关的资料。等我搞懂了会补上，如果有大佬知道千万要告诉我，蟹蟹!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 云计算 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础(二): 基础命令</title>
      <link href="/docker-ji-chu-er-ji-chu-ming-ling/"/>
      <url>/docker-ji-chu-er-ji-chu-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>如题，本文将总结常用的Docker基础命令，包括但不限于：<em>帮助启动类命名</em>；<em>镜像命令</em>；<em>容器命令</em>。</p><span id="more"></span><hr><h2 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h2><p>启动docker：<code>systemctl start docker</code></p><p>停止docker：<code>systemctl stop docker</code></p><p>重启docker：<code>systemctl restart docker</code></p><p>查看docker状态：<code>systemctl enable docker</code></p><p>开即自启：<code>systemctl enable docker</code></p><p>查看docker概要信息：<code>docker info</code></p><p>docker帮助文档：<code>docker --help</code></p><p>docker某一命令帮助文档：<code>docker 命令 --help</code></p><hr><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>列出本地主机上的镜像：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>​    -a：列出本地全部的镜像(all)</p><p>​    -q：只显示镜像ID (quiet，静默模式)</p><p>​    返回结果中，<code>REPOSITORY</code>代表仓库名，即镜像名，<code>TAG</code>指镜像的版本号。</p></blockquote><p><strong>去docker仓库中搜索镜像：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> search 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果有5个参数，分别指：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>NAME</td><td>镜像名称</td></tr><tr><td>DESCRIPTION</td><td>镜像说明</td></tr><tr><td>STARS</td><td>点赞数量</td></tr><tr><td>OFFICIAL</td><td>是否官方</td></tr><tr><td>AUTOMATED</td><td>是否为自动构建的</td></tr></tbody></table><p><strong>拉取镜像：</strong><code>docker pull 镜像名</code>，完整形式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> 镜像名:TAG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只写了镜像名，则默认TAG为latest，即最新发布版。</p><p><strong>删除指定本地镜像：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> 镜像名<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>/ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只写了镜像名，则默认TAG为latest，但如果你的本地没有该镜像的latest版本，就会删除失败。</p><blockquote><p>删除单个：<code>docker rmi 镜像名[:TAG]/ID</code></p><p>删除多个：<code>docker rmi 镜像名1:TAG/ID 镜像名2:TAG/ID</code></p><p>强制删除：-f ，会直接删除镜像的所有容器</p><p>删除全部：<code>docker rmi -f $(docker images -qa)</code>    ==&gt; 小心坐牢</p></blockquote><hr><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>新建+启动容器：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> 镜像 <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，OPTIONS非常重要，几个最常用的有：</p><blockquote><p>–name=”容器名字”：  为容器起名，不起的化随机</p><p>-i：以交互模式运行容器，通过与-t同时使用</p><p>-t：为容器重新分配一个伪输入终端，通过与-i同时使用</p><p>-it 也即交互式容器（前台有伪终端，等待交互）</p><p>-d：后台运行容器并返回容器ID，也即启动守护式容器（后台运行）</p><p>-p：指定端口映射，小写p，如<code>-p 3306:3306</code>指将主机的3306端口映射到该容器内的3306端口</p><p>-P：随机端口映射，大写P</p><p>-e：创建环境变量</p></blockquote><p>注意，并不是所有的镜像都能够以<code>-d</code>来后台运行，比如ubuntu、centos这些交互式镜像，就需要有一个前台来交互，所以对他们而已，使用<code>-d</code>并不能使其持久化。但是，那些服务类的镜像，比如tomcat、mysql、redis等等，虽然镜像是构建在Linux文件系统上的，但是他们可以通过<code>-d</code>来后台运行。</p><p>另外，有镜像才能创建容器，当运行run时，会首先在本地寻找是否有该镜像，如果没有，就去docker仓库中将该镜像拉取到本地，然后在创建容器。</p><p>可以通过<code>-e</code>来在改容器中创建一个指定值的环境变量，之后每次进入该容器都可以直接使用，如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d --name<span class="token operator">=</span>r2 -e <span class="token assign-left variable">A</span><span class="token operator">=</span><span class="token number">123</span> redis:6.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.bmp.ovh/imgs/2022/01/c1208f0d47eab09e.png"></p><p><strong>列出当前所有在运行中的容器：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-a：列出当前所有正在运行的容器+历史上运行过的容器（如果容器没被删除）</p><p>-l：显示最近创建的容器</p><p>-n：显示最近n个创建的容器</p><p>-q：只显示容器编号</p></blockquote><p><strong>停止容器：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop 容器名/ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>启动停止的容器：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start 容器名/ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>重启容器：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart 容器名/ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>从容器中退出：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. exit：退出容器并使容器停止<span class="token number">2</span>. ctrl+p+1：退出容器但容器不会停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>删除容器：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> 容器名/ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>强制删除：-f，如果不加的化，只能删除停止的容器</p><p>删除全部容器：<code>docker rm -f $(docker ps -a -q)</code>  ==&gt; 小心坐牢</p></blockquote><p><strong>查看容器日志：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs 容器名/ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看容器内的进程信息：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">top</span> 容器名/ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看容器内部细节：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect 容器名/ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在容器内部运行指令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> 容器名/ID COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>docker exec</code> 会在容器内部运行COMMAND指令。实际上，容器就是个极小的Linux环境，它包含最必须的文件系统，因此实则时该Linux环境在执行这条命令。每个容器都会有一个默认的工作目录，该目录会在镜像的<code>Dockerfile</code>中指定，如果不另外指定的化，容器将在该目录下执行指令。</p><blockquote><p>COMMAND should be an executable, a chained or a quoted command will not work. Example: <code>docker exec -ti my_container &quot;echo a &amp;&amp; echo b&quot;</code> will not work, but <code>docker exec -ti my_container sh -c &quot;echo a &amp;&amp; echo b&quot;</code> will.</p></blockquote><p>比如，在mysql镜像构建的容器中使用命令date：</p><p><img src="https://i.bmp.ovh/imgs/2022/01/01abdf861dbf6295.png"></p><p>最关键的，之前有提到退出容器，那么退出容器后怎么再次进入呢？答案就是<code>exec</code>。进入容器，实际上就是使用容器的终端，因此首先要让容器打开一个终端，故将COMMAND设为<code>/bin/bash</code>或简写为<code>bash</code>。但是此时我们并不能进入这个终端，因为容器并不是交互时运行的，因此还需要使用OPTIONS<code>-it</code>来指定其为交互式运行，才能进入这个容器内的终端。故命令为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker exec -it 容器名/ID /bin/bash</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 容器名/ID <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.bmp.ovh/imgs/2022/01/dd2d0756e06ff06c.png"></p><p>当然，类似于<code>run</code> ，<code>exec</code>也可以通过<code>-e</code>来在容器中创建一个环境变量。但是不同于前者，<code>exec</code>创建的环境变量只能在本次执行过程中使用，一旦退出容器，下次再进入就没有该变量了。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/0558c72736debfb8.png"></p><p>另一个非常重要的特性是，使用<code>exec -it .. bash</code>进入的容器，在<code>exit</code>退出之后，<strong>不会停止</strong>！与其相对应的，是<code>attach</code>命令，该命令也可也进入容器，但是用<code>exit</code>退出之后会导致容器的停止。</p><p><strong>从容器内拷贝文件到主机上：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> 容器名/ID:容器内路径 目的主机路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令会将指令的容器内路径中的所有文件，全部拷贝到目的主机，是简单的备份方式。</p><p><strong>导入和导出容器</strong></p><p><code>export</code>可以导出容器的内容留作一个<code>tar</code>归档文件。<code>import</code>可以从<code>tar</code>包中的内容创建一个新的文件系统再导入为镜像，注意，是生成镜像，而不是创建容器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">export</span> 容器名/ID <span class="token operator">></span> 文件名.tar<span class="token function">cat</span> 文件名.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - <span class="token punctuation">[</span>镜像用户/<span class="token punctuation">]</span>镜像名<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.bmp.ovh/imgs/2022/01/4377aec9248f12ff.png"></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://i.bmp.ovh/imgs/2022/01/999500d8cc65b5cf.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 云计算 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础(一): 初识</title>
      <link href="/docker-ji-chu-yi-chu-shi/"/>
      <url>/docker-ji-chu-yi-chu-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.bmp.ovh/imgs/2022/01/b5b955b5a52df78a.jpg"></p><p>假设你已经开发了一个Java项目，你所用的开发设备上已经配好了所有的相关环境，比如java8/mysql/redis等等。现在，你需要将你的源码交付给其他开发人员和测试人员或者直接打成jar包部署上线。问题来了，每个人机器上的环境都不一样，而你开发的项目依赖于你所选的环境和某些配置文件，这样一来其他人就需要为你的项目重新配好环境，非常麻烦。那么有没有什么办法可以避免这种头疼的配置协调问题呢？</p><span id="more"></span><p>试想，如果你将jar包或者源码和整个项目需要的所有配置环境和依赖一并打包，使你交付的东西不仅拥有项目本身，还拥有整个环境，这样拉下来之后直接可以运行，问题不就解决了吗。而这，就是 <code>docker</code> 的核心思想！</p><hr><h3 id="Docker的意义"><a href="#Docker的意义" class="headerlink" title="Docker的意义"></a>Docker的意义</h3><p>在docker出来之前，开发和运维的对调是很麻烦的，经常出现开发者的项目没问题，但是到了运维那就跑不起来了，基本都是环境的问题。比如，你使用java8写了一个项目，但是运维那里用的是java11，你使用mysql5.7.17，但是运维那用mysql8.0.26。</p><p>好在，你和运维关系很好，没吵架，他愿意和你协调。于是，你把项目需要的所有配置列成清单给他，他一看，麻了。清单上列的慢慢的环境配置，和他现在用的都不一样，得一个个重新配。很明显，传统项目交接有两个很头痛的毛病</p><blockquote><p>1&gt;  环境不一样</p><p>2&gt;  安装啰嗦，配置麻烦</p></blockquote><p>你以为这样就结束了？不对！假设你写的项目是一个电商平台，每天的数据量非常大，redis必须使用集群。到了双十一附近，交易量猛增，集群必须要迅速的扩容，从原来的3主3从扩到5主5从。在传统的方式中，运维撑破天也无法在<code>秒级</code>完成这种扩缩容。这就暴露出了第三个缺点：</p><blockquote><p>3&gt;  扩缩容慢</p></blockquote><p>Docker的出现得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心、运作应用程序所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。</p><hr><h3 id="Docker与虚拟机的对比"><a href="#Docker与虚拟机的对比" class="headerlink" title="Docker与虚拟机的对比"></a>Docker与虚拟机的对比</h3><p>docker并不是第一个采用这种思想的技术，在docker出来之前，业界的网红是 <code>虚拟机(virtual machine)</code>， 它也是一个典型的带环境安装的方案。不管你的物理机是什么系统，只要下载下来OS的镜像(.iso)，在VMWare上一跑就行了。</p><p>比如Windows10系统里面运行Linux系统CentOS7。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。需要注意的是，虚拟机是要虚拟出一整套<code>硬件</code>的，然后在其上运行一整个完整的OS。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/fef1097b924d5562.png"></p><p>正因为虚拟机是硬件层面上的虚拟，且要模拟出整套OS，因此体量非常大，故缺点很多，比如：</p><blockquote><p>​    &gt; 内存占用大</p><p>​    &gt; 启动慢</p><p>​    &gt; 冗余步骤多，麻烦</p></blockquote><p>由于虚拟机存在这些缺点，Linux发展出了另一种虚拟化技术：</p><blockquote><p>Linux容器（Linux Containers，缩写为LXC）</p></blockquote><p>Linux容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需要的所有资源打包到一个隔离的容器中。容器于虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和配置，也就是<strong>最小的最必须的环境</strong>。系统因此变得高效而轻量，并保证部署在任何环境中的软件都能始终如一地运行。实际上，这个Linux容器技术，后来就发展成了<code>docker</code>。</p><p>Docker容器是在 <code>OS层面</code> 上虚拟化的，直接复用本地主机的OS。与虚拟机相比，Docker启动快速、体积小。</p><table><thead><tr><th align="center"></th><th align="center">Virtual Machine</th><th align="center">Docker</th></tr></thead><tbody><tr><td align="center">大小</td><td align="center">GB-TB</td><td align="center">KB-MB</td></tr><tr><td align="center">启动速度</td><td align="center">分钟级</td><td align="center">秒级</td></tr><tr><td align="center">虚拟层面</td><td align="center">硬件</td><td align="center">OS</td></tr><tr><td align="center">隔离级别</td><td align="center">OS级</td><td align="center">进程级</td></tr><tr><td align="center">集群规模</td><td align="center">上百</td><td align="center">上万</td></tr></tbody></table><p>总结一下就是：</p><blockquote><p>​    &gt; 传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整OS，在该系统上在运行所需应用进程</p><p>​    &gt; 容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也没有进行硬件虚拟。</p><p>​    &gt; 每个容器之间互相隔离，各自有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</p></blockquote><hr><h3 id="Docker的诞生"><a href="#Docker的诞生" class="headerlink" title="Docker的诞生"></a>Docker的诞生</h3><p>2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。这家公司主要提供基于PaaS的云计算技术服务，具体来说，就是和前面提到的<code>LXC</code>有关的容器技术。后来，dotCloud公司将自己的容器技术进行了简化和标准化，并将该技术命名为——<strong>Docker</strong>。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/887208c6d030f816.png"></p><p>很可惜，Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。那怎么办呢？==&gt; 办不下去就开源！</p><p>2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的Solomon Hykes决定，将Docker技术开源。不开则已，一开惊人。越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入了Docker开源社区。Docker人气迅速攀升，开源当月，Docker 0.1发布，在此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0版本正式发布。</p><p>此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc。</p><p>就在Docker容器技术被炒得热火朝天之时，大家发现，如果想要将Docker应用于具体的业务实现，是存在困难的——编排、管理和调度等各个方面，都不容易。于是，人们迫切需要一套管理系统，对Docker及容器进行更高级更灵活的管理。这个时候，K8S出现了！</p><blockquote><p>K8S，就是基于容器的集群管理平台，它的全称，是kubernetes，8是代表中间8个字母。</p></blockquote><p><img src="https://i.bmp.ovh/imgs/2022/01/fd0878675fafdd67.png"></p><p>和Docker不同，K8S的创造者，是众人皆知的行业巨头——Google。然而，K8S并不是一件全新的发明。它的前身，是Google自己捣鼓了十多年的<strong>Borg</strong>系统。</p><p>其实，在很早之前，Google就用了容器化的技术，并拥有一套完善的集群管理系统——Borg，且不开源。慢慢地，对这种管理系统的需求越来越多，但Google迟迟不开源，没办法，需求者只能自己写。唉，这个时候，Google怕了，万一这种技术出现了，那自己垄断Borg的优势不久荡然无存了。怎么办？ ==&gt; 打不过就加入，我开源还不行嘛。于是乎，Google用Go重写了一遍Borg，更名为K8S，将其开源，继续作为领域的领跑者。</p><p>2014年6月，Google公司正式公布K8S并宣布开源的。之后的一年内，VMware、HP、Intel等公司，也陆续加入。2015年7月，Google正式加入OpenStack基金会。与此同时，Kuberentes v1.0正式发布。</p><p>K8S的架构，相对来说很复杂，组件比较多，交互也复杂，具体的之后再说吧。</p><hr><h3 id="Docker三要素"><a href="#Docker三要素" class="headerlink" title="Docker三要素"></a>Docker三要素</h3><blockquote><p>​    &gt; 镜像（image）</p><p>​    &gt; 容器（container）</p><p>​    &gt; 仓库（repository）</p></blockquote><p>可以用java做一个粗略的类比，所谓镜像，就是java中的一个个class，所谓容器，就是用class来new出来的一个个对象（实例），所谓仓库，就是存储那些镜像的地方。</p><p>再生动一些，你住的房子就是你现在所处的容器，假设你要搬家，但是还想住一个和现在一摸一样的家，于是你找来了女巫，女巫用魔法通过你的房子生成了一个一摸一样的模型，整个模型就是<code>镜像</code>。你将该模型带了一片空地上，女巫瞬间用改模型在地上建立了一个和之前那个一摸一样的新房子，连地基都一样，这个新房子就是一个新的<code>容器</code>。现在，女巫告诉你她有一个<code>仓库</code>，你可以将自己房子的镜像上传上去，也可以拉取别人的镜像，里面有中式四合院、欧式别墅、大豪宅、甚至还有非洲茅草屋，只要拉取了镜像，直接可以带地基生成一个完整的房子，岂不美哉？</p><blockquote><p>Docker镜像（image）就是一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建很多容器，也可以通过容器来构造一个新的镜像。它也相当于是一个root文件系统，比如官方镜像centos:7就包含了完整的一套centos:7最小系统的root文件系统。</p><p>容器就是一个简易版的Linux环境，包括root用户权限、进程空间、用户空间和网络空间等等，外加在其中运行的应用程序。</p></blockquote><p>要注意，Docker本身并不是容器，它是创建容器的工具，是应用容器引擎，即Docker Engine。</p><p>至于仓库，就是docker hub，类似于github，官方仓库为：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><img src="https://i.bmp.ovh/imgs/2022/01/6dba028887a78da1.png"></p><p>基于此，Docker提出了它的两句口号</p><blockquote><p>1&gt;  Build, Ship and Run； 即“构建，发送，运行”三板斧</p><p>2&gt;  Build once, Run anywhere； 即构建一次，处处能用</p></blockquote><hr><h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p><img src="https://i.bmp.ovh/imgs/2022/01/7ce065860607102a.png"></p><p>Docker是一个<code>C/S模式的架构</code>，后端是一个松耦合架构，众多模块各司其职，Docker运行的基本流程为：</p><p>1&gt;  用户使用Docker Client与Docker Daemon建立通信，并发送请求给后者。</p><p>2&gt;  Docker Daemon作为Docker架构中的主体部分，首先提供Docker Server的功能使其可以接收Docker Client的请求。</p><p>3&gt;  Docker Engine执行Docker内部的一系列工作，每一项工作都是以一个Job的形式存在的。比如，用<code>docker run 镜像</code> 命令来创建一个容器，就是一个Job。</p><p>4&gt;  Job运行过程中，当需要镜像时，就会在本地中找，如果本地没有，就去Docker Registry中拉取镜像，并通过镜像管理驱动Graph driver将下载镜像以Graph的形式存储在本地。</p><p>5&gt;  当需要为Docker容器创建环境时，通过网络管理驱动Network Driver创建并配置Docker容器网络环境。详细情况会在后续Docker network博客讲述。</p><p>6&gt;  当需要限制Docker容器运行资源或执行用户指令等操作时，则通过Exec Driver来完成。主要为命令：<code>docker exec [OPTIONS] 容器名/ID [CMD] </code>，详见后续docker基础命令博客。</p><p>7&gt;  Libcontainer是一项独立的容器管理包，Network driver以及Exec driver都是通过Libcontainer来实现具体对容器进行的操作。</p><p><img src="/docker-ji-chu-yi-chu-shi/docker-ar.png" alt="docker-ar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 云计算 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo(一): Github部署</title>
      <link href="/hexo-github-bu-shu/"/>
      <url>/hexo-github-bu-shu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.bmp.ovh/imgs/2022/01/19ac51e4df9b7946.png"></p><p>Hexo是一个快速、简洁且高效的博客框架，默认使用MarkDown解析文章，用选定的主题渲染出静态页面。使用<code>JavaScript</code>进行逻辑控制，没有后端，直接通过Url访问页面即可。通过github仓库来存储Hexo需要的文件(包括<code>资源文件</code>和<code>Html页面</code>)，即可搭建公网博客。</p><span id="more"></span><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装Hexo很简单，不过要先装上<code>Node.js</code>和<code>Git</code></p><blockquote><p>​    &gt; Node.js</p><p>​    &gt; Git</p><p>​    &gt; Hexo</p></blockquote><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo基于JavaScript，因此首先要安装<code>Node.js</code>，版本不能低于10.13。Hexo建议使用最新版本，Node.js建议使用<code>v12.22</code>版本，版本过高会导致一些插件无法适配。</p><table><thead><tr><th align="left">Hexo 版本</th><th align="left">最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td align="left">6.0+</td><td align="left">12.13.0</td></tr><tr><td align="left">5.0+</td><td align="left">10.13.0</td></tr><tr><td align="left">4.1 - 4.2</td><td align="left">8.10</td></tr><tr><td align="left">4.0</td><td align="left">8.6</td></tr></tbody></table><p>​    安装好后，将Node换成<code>国内源</code>，非必须，不过npm下载会很慢。这里使用淘宝的镜像源：</p><ul><li>临时换源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> --registry https://registry.npm.taobao.org <span class="token function">install</span> express<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>永久换源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><blockquote><p><strong>Mac用户</strong></p><p>如果在编译时可能会遇到问题，请先到 App Store 安装 <code>Xcode</code>，安装完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></blockquote><blockquote><p><strong>Windows用户</strong></p><p>对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p></blockquote><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>安装完Node.js和Git之后，即可安装Hexo，建议全局安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看Hexo版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>在部署前，需要在本地对Hexo进行一些操作，包括目录的初始化、静态页面的生成和预览等。</p><h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init Blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入上述命令，会在当前目录下生成一个<code>Blog</code>目录(名字可以自己取)。目录中结构大致为：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>_config.yml</code>为博客的根配置文件，配置信息参照：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a> <code>source</code>目录下存放博客的md文件以及博客需要的资源文件。<code>theme</code>目录下存放下载的资源文件，可在根_config.yml中指定选用的主题。</p><p>进入该文件夹，安装必备的node组件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会有WARN，不过没有影响。</p><h3 id="静态网页生成与预览"><a href="#静态网页生成与预览" class="headerlink" title="静态网页生成与预览"></a>静态网页生成与预览</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令将根据Blog文件夹中的资源和配置生成静态网页，命令可可简写为<code>hexo g</code></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">INFO  Start processingINFO  Files loaded in 356 msINFO  Generated: index.htmlINFO  Generated: archives/index.htmlINFO  Generated: fancybox/fancybox_loading@2x.gifINFO  Generated: fancybox/jquery.fancybox.cssINFO  Generated: fancybox/fancybox_loading.gifINFO  Generated: fancybox/blank.gifINFO  Generated: fancybox/helpers/fancybox_buttons.pngINFO  Generated: js/script.jsINFO  Generated: fancybox/fancybox_overlay.pngINFO  Generated: fancybox/fancybox_sprite.pngINFO  Generated: fancybox/fancybox_sprite@2x.pngINFO  Generated: archives/2019/06/index.htmlINFO  Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO  Generated: fancybox/jquery.fancybox.pack.jsINFO  Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO  Generated: css/style.cssINFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO  Generated: archives/2019/index.htmlINFO  Generated: fancybox/helpers/jquery.fancybox-media.jsINFO  Generated: css/fonts/fontawesome-webfont.eotINFO  Generated: css/fonts/fontawesome-webfont.woffINFO  Generated: css/fonts/fontawesome-webfont.svgINFO  Generated: css/fonts/FontAwesome.otfINFO  Generated: css/fonts/fontawesome-webfont.ttfINFO  Generated: 2019/06/08/hello-world/index.htmlINFO  Generated: fancybox/jquery.fancybox.jsINFO  Generated: css/images/banner.jpgINFO  28 files generated in 715 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于现在还没有进行Git部署，所以只能在本地预览：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以简写为<code>hexo s</code>，该命令将开启本地服务。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">INFO  Validating configINFO  Start processingINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Hexo默认4000端口，因此打开 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到博客啦。</p><p><img src="https://i.bmp.ovh/imgs/2022/01/9da67a7fd947625c.png"></p><hr><h2 id="Github部署"><a href="#Github部署" class="headerlink" title="Github部署"></a>Github部署</h2><p>我们需要一个远程仓库来存储Hexo需要的文件并托管博客，Github就很适合。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>点击<code>New repository </code>创建一个新的仓库，给仓库取名</p><p><img src="https://i.bmp.ovh/imgs/2022/01/06e303b4485eb91b.png"></p><ul><li>Rep name一定要严格按照 <code>Account Name</code>.github.io的形式来命名，只有这样的仓库名称才能在公网上以静态页面的形式展示。</li><li>访问权限设为Public</li></ul><h3 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h3><p><code>SSH Key</code>(Secure Shell)是一个公私钥对，这里用于Git仓库和本地机器的绑定。使用SSH Key，就可以不用每次更新都需要输入令牌，方便很多。</p><blockquote><p>​    &gt; 一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题</p><p>​    &gt; 如果换了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上</p><p>​    &gt; 如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key</p></blockquote><p>SSH Key是针对机器而非特定目录的，所以在任意一个目录下打开<code>Git Bash</code>，输入<code>ssh</code>检查机器是否装有SSH。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface]           [-b bind_address] [-c cipher_spec] [-D [bind_address:]port]           [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11]           [-i identity_file] [-J [user@]host[:port]] [-L address]           [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port]           [-Q query_option] [-R address] [-S ctl_path] [-W host:port]           [-w local_tun[:remote_tun]] destination [command]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，在本地生成SHH公私钥对，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"github的注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>键入四个回车就行，用默认选项。完成后，该命令会在用户文件夹下生成一个<code>.ssh</code>目录，路径为：C:\Users\用户名\.ssh。目录下有两个文件，分别为：</p><blockquote><p>​    &gt; id_rsa：SSH私钥</p><p>​    &gt; id_rsa.pub：SSH公钥</p></blockquote><p>生成完毕后，将SSH公钥注册进Github中。在<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSh key</code>中新建一个SSH公钥：</p><p><img src="/Hexo-github%E9%83%A8%E7%BD%B2/fa156de2f4d32046.png"></p><p>Titile可以随便取，但是Key一定要要原封不动的复制id_rsa.pub中的内容，空格和换行都不能动。注册成功后，SSH Keys中就可以看到该公钥：</p><p><img src="https://i.bmp.ovh/imgs/2022/01/cbcaf19961dd2f30.png"></p><p>最后，验证本地与仓库是否绑定成功，输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会得到下面这句话：</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">Hi sakura-ysy! You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>but后面的这里不用关注。</p><h3 id="本地推送"><a href="#本地推送" class="headerlink" title="本地推送"></a>本地推送</h3><p>在根<code>_config.yml</code>中进行部署配置，将<code>deploy</code>中的内容全部改为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/sakura<span class="token punctuation">-</span>ysy/sakura<span class="token punctuation">-</span>ysy.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>type是固定的，rep指仓库地址，branch可以自己选要用哪个分支部署。注意，github的主分支由原来的master变为了main。</p><p>然后，在博客根目录下打开<code>Git Bash</code>，安装Git部署工具:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完后就可以在本地生成页面并推送。</p><p>在生成新的页面之前，先用 <code>hexo clean</code> 清除缓存文件与之前生成的静态文件目录public。清除完毕后，使用<code>hexo g</code>生成静态页面。</p><p>最后，即可开始推送并部署，使用命令<code>hexo d</code> ，全称为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在第一次推送时，要进行身份验证从2021.08.13开始， GitHub不再支持账号和密码的方式进行身份验证了，取而代之的是官方推出的<code>Personal access tokens</code>。</p><p>在Github中的 <code>Seqttings</code>-&gt;<code>Developer settings</code>-&gt;<code>Personal access tokens</code>-&gt;<code>Personal access tokens</code> 生成一个新的令牌：</p><p><img src="https://i.bmp.ovh/imgs/2022/01/57a82e42da55b911.png"></p><p>权限可以全部选上，没关系。完成后，即生成了一串序列号，它就是我们用于代替密码的令牌：</p><p><img src="https://i.bmp.ovh/imgs/2022/01/4c06520619a2bb09.png"></p><p>在第一次<code>hexo d</code>需要验证身份时，输入上述令牌即可。</p><p>上面工作全部完成后，即可通过公网访问博客，网址就是仓库名：<a href="http://sakura-ysy.github.io/">http://sakura-ysy.github.io</a></p><hr><h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><p>MarkDown中存储的是图片本地文件路径，要想在公网展示，必须将图片存储在云端并在md中使用该路径，有两个较好用的方法：</p><blockquote><p>​    &gt; 图片存在Git仓库</p><p>​    &gt; 使用图床</p></blockquote><h3 id="图片存在Git仓库"><a href="#图片存在Git仓库" class="headerlink" title="图片存在Git仓库"></a>图片存在Git仓库</h3><p>首先安装插件hexo-renderer-marked：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，在根_config.yml中新增如下配置 :</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">marked</span><span class="token punctuation">:</span>  <span class="token key atrule">prependRoot</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">postAsset</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样以来，当我们使用 <code>hexo new post &#39;文章名&#39;</code> 时，在source/_post目录下除了生成对应的md文件，还会生成一个同名的目录。将所有图片存在该目录下，并使用相对路径引用该目录中的图片即可。</p><p>但是，上述插件只会生成一个空目录，并不会自动将图片放进去，所有操作需要手动执行，非常麻烦，那怎么让它自动执行？这里就要用到强大的<strong>Typora</strong>了</p><p>打开Typora的偏好设置，使图片在插入时会复制到指定路径，由于目标目录名和文章名相同，因此复制到<code>./$&#123;filename&#125;</code>处即可。</p><p><img src="https://s2.loli.net/2022/01/15/xBvwpgXJFE9oqeW.png" alt="image.png"></p><p>使用该配置后，插入到Typora中的图片，会直接复制该到文章资源文件夹，同时在md中自动更改路径。如复制网络路径的图片<code>https://...../image.jpg</code>粘贴到Typora中叫<code>文章名</code>的文章后，图片会自动变为<code>![](文章名/image.jpg)</code>。</p><p>但是在部署后的路径和本地路径是不一样的，它会直接在文章的资源文件夹中找，因此路径中的<code>文章名/</code> 需要删掉，即更改为<code>[]image.jpg)</code>，这样虽然在本地md中路径错误，但是部署后即正确。</p><p>为了方便，可以在Typora编写完博客后，使用Ctrl+F全局搜索<code>文章名/</code>，然后将其替换成空串即可。</p><h3 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h3><p>将图片存在Git上有两个缺点，一是本地寻址不出来，二是图片加载很慢，为了解决这两个问题，可以使用图床来存储图片。</p><p>所谓图床，就是公网上的存储空间，将本地文件上传上去后会返回该图片在网络上的URL，使用该URL作为图片路径即可。</p><p>如果有已备案域名的话，推荐使用七牛云，因为它是国内服务商，速度快且稳定，不用担心被封，用户也有免费的10G空间可用。</p><p>如果没有的话，直接使用现成的公共图床也可，不同的图床速度和空间都不一样，根据需求选用，可以参考：<a href="https://zhuanlan.zhihu.com/p/58863378">https://zhuanlan.zhihu.com/p/58863378</a></p><p>比如使用<a href="https://sm.ms/">sm.ms</a>图床，上传后返回图片的网络地址和不同的引用格式，在md文件中引用就行。</p><p><img src="https://s2.loli.net/2022/01/15/jLJsXgzFWA7Hlvp.png" alt="image.png"></p><p>建议使用具有CDN加速的图床，这样会很快。</p><p>不过公共图床毕竟是公共的，免不了被封的风险，且自己也没法管理上传的内容。所以如果想折腾的话，建议用自己的服务器搭图床。</p><hr><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>.github.io这个域名后缀着实不好看，并且前面必须用git账户名，所以给它绑个域名最好。首先得租一个域名，可以直接去阿里万网那租。租完后，就需要将新域名和原域名进行绑定，这个操作在服务商端和Git端都要进行，可以理解为一种双向同意。</p><h3 id="服务商端"><a href="#服务商端" class="headerlink" title="服务商端"></a>服务商端</h3><p>以阿里万网为例，点击<code>解析</code>进入解析设置。</p><p><img src="https://s2.loli.net/2022/01/15/PTl2WvhfyNaEKRL.png" alt="MAIJUE8AS_SJ2G1A_M90MZC.png"></p><p>将记录类型设为<code>CNAME</code>，意为用该域名指向另一个域名。记录值填原域名，即sakura-ysy.github.io。其他值默认就行。</p><p><img src="https://s2.loli.net/2022/01/15/AfwcSEl5U9gHRBF.png" alt="image.png"></p><p>当然，记录类型也可以选择A，即直接让域名执行Git的IPv4，可以通过<code>ping sakura-ysy.github.io</code> 来获得该IP。</p><p>至于主机记录，其实就是域名前缀，常见用法有：</p><blockquote><ul><li><p><strong>www：</strong>解析后的域名为<a href="http://www.aliyun.com./">www.aliyun.com。</a></p></li><li><p><strong>@：</strong>直接解析主域名 aliyun.com。</p></li><li><p>*<strong>：</strong>泛解析，匹配其他所有域名 *.aliyun.com。</p></li><li><p><strong>mail：</strong>将域名解析为mail.aliyun.com，通常用于解析邮箱服务器。</p></li><li><p><strong>二级域名：</strong>如：abc.aliyun.com，填写abc。</p></li><li><p><strong>手机网站：</strong>如：m.aliyun.com，填写m。</p></li><li><p><strong>显性URL：</strong>不支持泛解析（泛解析：将所有子域名解析到同一地址）</p></li></ul></blockquote><h3 id="Git端"><a href="#Git端" class="headerlink" title="Git端"></a>Git端</h3><p>只需要在Git仓库中添加一个无后缀文件<code>CNAME</code>，内容只有一行，为绑定的域名，即<code>yesiyuan.cn</code>。当然，也可以直接在Settings-&gt;Pages中的Custom domain中绑定该域名。</p><p><img src="https://s2.loli.net/2022/01/15/MyLpC91z3tTYi5l.png" alt="image.png"></p><p>两端都完成配置后，即可使用新域名来访问博客啦。</p><h3 id="使用HTTPS"><a href="#使用HTTPS" class="headerlink" title="使用HTTPS"></a>使用HTTPS</h3><p>这个我还没弄</p><p>未完待续……</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>波吉</title>
      <link href="/test1/"/>
      <url>/test1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.bmp.ovh/imgs/2022/01/dce0dc1cfbffa31b.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 波吉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
